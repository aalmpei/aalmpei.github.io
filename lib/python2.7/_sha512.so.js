// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var __str9;
var __str8;
var __str7;
var __str6;
var __str5;
var __str4;
var __str3;
var __str2;
var __str17;
var __str16;
var __str15;
var __str14;
var __str13;
var __str12;
var __str11;
var __str10;
var __str1;
var __str;
var _SHA_methods;
var _SHA_members;
var _SHA_getseters;
var _SHA_functions;
var _SHA512type;
var _SHA512_update__doc__;
var _SHA512_new_kwlist;
var _SHA512_new__doc__;
var _SHA512_hexdigest__doc__;
var _SHA512_digest__doc__;
var _SHA512_copy__doc__;
var _SHA384type;
var _SHA384_new_kwlist;
var _SHA384_new__doc__;
__str9=allocate([83,72,65,51,56,52,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([83,72,65,53,49,50,0,0], "i8", ALLOC_NORMAL);
__str7=allocate([110,97,109,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str6=allocate([98,108,111,99,107,95,115,105,122,101,0,0], "i8", ALLOC_NORMAL);
__str5=allocate([95,115,104,97,53,49,50,46,115,104,97,53,49,50,0,0], "i8", ALLOC_NORMAL);
__str4=allocate([124,115,42,58,110,101,119,0], "i8", ALLOC_NORMAL);
__str3=allocate([115,116,114,105,110,103,0,0], "i8", ALLOC_NORMAL);
__str2=allocate([115,104,97,51,56,52,0,0], "i8", ALLOC_NORMAL);
__str17=allocate([95,115,104,97,53,49,50,46,115,104,97,51,56,52,0,0], "i8", ALLOC_NORMAL);
__str16=allocate([115,42,58,117,112,100,97,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str15=allocate([117,112,100,97,116,101,0,0], "i8", ALLOC_NORMAL);
__str14=allocate([104,101,120,100,105,103,101,115,116,0,0,0], "i8", ALLOC_NORMAL);
__str13=allocate([100,105,103,101,115,116,0,0], "i8", ALLOC_NORMAL);
__str12=allocate([99,111,112,121,0,0,0,0], "i8", ALLOC_NORMAL);
__str11=allocate([100,105,103,101,115,116,115,105,122,101,0,0], "i8", ALLOC_NORMAL);
__str10=allocate([100,105,103,101,115,116,95,115,105,122,101,0], "i8", ALLOC_NORMAL);
__str1=allocate([115,104,97,53,49,50,0,0], "i8", ALLOC_NORMAL);
__str=allocate([95,115,104,97,53,49,50,0], "i8", ALLOC_NORMAL);
_SHA_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_members=allocate([0,0,0,0,1,0,0,0,216,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,216,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_getseters=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_functions=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA512type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA512_update__doc__=allocate([85,112,100,97,116,101,32,116,104,105,115,32,104,97,115,104,32,111,98,106,101,99,116,39,115,32,115,116,97,116,101,32,119,105,116,104,32,116,104,101,32,112,114,111,118,105,100,101,100,32,115,116,114,105,110,103,46,0,0,0], "i8", ALLOC_NORMAL);
_SHA512_new_kwlist=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA512_new__doc__=allocate([82,101,116,117,114,110,32,97,32,110,101,119,32,83,72,65,45,53,49,50,32,104,97,115,104,32,111,98,106,101,99,116,59,32,111,112,116,105,111,110,97,108,108,121,32,105,110,105,116,105,97,108,105,122,101,100,32,119,105,116,104,32,97,32,115,116,114,105,110,103,46,0], "i8", ALLOC_NORMAL);
_SHA512_hexdigest__doc__=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,115,46,0,0], "i8", ALLOC_NORMAL);
_SHA512_digest__doc__=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,98,105,110,97,114,121,32,100,97,116,97,46,0], "i8", ALLOC_NORMAL);
_SHA512_copy__doc__=allocate([82,101,116,117,114,110,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,104,97,115,104,32,111,98,106,101,99,116,46,0,0,0], "i8", ALLOC_NORMAL);
_SHA384type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA384_new_kwlist=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA384_new__doc__=allocate([82,101,116,117,114,110,32,97,32,110,101,119,32,83,72,65,45,51,56,52,32,104,97,115,104,32,111,98,106,101,99,116,59,32,111,112,116,105,111,110,97,108,108,121,32,105,110,105,116,105,97,108,105,122,101,100,32,119,105,116,104,32,97,32,115,116,114,105,110,103,46,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[((_SHA_methods)>>2)]=((__str12)|0);
HEAP32[(((_SHA_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 18));
HEAP32[(((_SHA_methods)+(12))>>2)]=((_SHA512_copy__doc__)|0);
HEAP32[(((_SHA_methods)+(16))>>2)]=((__str13)|0);
HEAP32[(((_SHA_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 8));
HEAP32[(((_SHA_methods)+(28))>>2)]=((_SHA512_digest__doc__)|0);
HEAP32[(((_SHA_methods)+(32))>>2)]=((__str14)|0);
HEAP32[(((_SHA_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 12));
HEAP32[(((_SHA_methods)+(44))>>2)]=((_SHA512_hexdigest__doc__)|0);
HEAP32[(((_SHA_methods)+(48))>>2)]=((__str15)|0);
HEAP32[(((_SHA_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 6));
HEAP32[(((_SHA_methods)+(60))>>2)]=((_SHA512_update__doc__)|0);
HEAP32[((_SHA_members)>>2)]=((__str10)|0);
HEAP32[(((_SHA_members)+(20))>>2)]=((__str11)|0);
HEAP32[((_SHA_getseters)>>2)]=((__str6)|0);
HEAP32[(((_SHA_getseters)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 4);
HEAP32[(((_SHA_getseters)+(20))>>2)]=((__str7)|0);
HEAP32[(((_SHA_getseters)+(24))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[((_SHA_functions)>>2)]=((__str1)|0);
HEAP32[(((_SHA_functions)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 10));
HEAP32[(((_SHA_functions)+(12))>>2)]=((_SHA512_new__doc__)|0);
HEAP32[(((_SHA_functions)+(16))>>2)]=((__str2)|0);
HEAP32[(((_SHA_functions)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_SHA_functions)+(28))>>2)]=((_SHA384_new__doc__)|0);
HEAP32[(((_SHA512type)+(12))>>2)]=((__str5)|0);
HEAP32[(((_SHA512type)+(24))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_SHA512type)+(116))>>2)]=((_SHA_methods)|0);
HEAP32[(((_SHA512type)+(120))>>2)]=((_SHA_members)|0);
HEAP32[(((_SHA512type)+(124))>>2)]=((_SHA_getseters)|0);
HEAP32[((_SHA512_new_kwlist)>>2)]=((__str3)|0);
HEAP32[(((_SHA384type)+(12))>>2)]=((__str17)|0);
HEAP32[(((_SHA384type)+(24))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_SHA384type)+(116))>>2)]=((_SHA_methods)|0);
HEAP32[(((_SHA384type)+(120))>>2)]=((_SHA_members)|0);
HEAP32[(((_SHA384type)+(124))>>2)]=((_SHA_getseters)|0);
HEAP32[((_SHA384_new_kwlist)>>2)]=((__str3)|0);
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_SHA512_dealloc,0,_SHA512_get_block_size,0,_SHA512_update,0,_SHA512_digest,0,_SHA512_new,0,_SHA512_hexdigest,0,_SHA384_new,0,_SHA512_get_name,0,_SHA512_copy,0]);
// EMSCRIPTEN_START_FUNCS
function _sha384_init(r1){var r2,r3;r2=r1>>2;HEAP32[r2+52]=1;r3=r1+8|0;HEAP32[r3>>2]=-1056596264;HEAP32[r3+4>>2]=-876896931;r3=r1+16|0;HEAP32[r3>>2]=914150663;HEAP32[r3+4>>2]=1654270250;r3=r1+24|0;HEAP32[r3>>2]=812702999;HEAP32[r3+4>>2]=-1856437926;r3=r1+32|0;HEAP32[r3>>2]=-150054599;HEAP32[r3+4>>2]=355462360;r3=r1+40|0;HEAP32[r3>>2]=-4191439;HEAP32[r3+4>>2]=1731405415;r3=r1+48|0;HEAP32[r3>>2]=1750603025;HEAP32[r3+4>>2]=-1900787065;r3=r1+56|0;HEAP32[r3>>2]=1694076839;HEAP32[r3+4>>2]=-619958771;r3=r1+64|0;HEAP32[r3>>2]=-1090891868;HEAP32[r3+4>>2]=1203062813;HEAP32[r2+18]=0;HEAP32[r2+19]=0;HEAP32[r2+53]=0;HEAP32[r2+54]=48;return}function _init_sha512(){HEAP32[_SHA384type+4>>2]=_PyType_Type;if((_PyType_Ready(_SHA384type)|0)<0){return}HEAP32[_SHA512type+4>>2]=_PyType_Type;if((_PyType_Ready(_SHA512type)|0)<0){return}else{_Py_InitModule4_64(__str|0,_SHA_functions|0,0,0,1013);return}}function _SHA512_new(r1,r2,r3){var r4,r5,r6;r1=STACKTOP;STACKTOP=STACKTOP+52|0;r4=r1;_memset(r4,0,52);if((_PyArg_ParseTupleAndKeywords(r2,r3,__str4|0,_SHA512_new_kwlist|0,(tempInt=STACKTOP,STACKTOP=STACKTOP+4|0,HEAP32[tempInt>>2]=r4,tempInt))|0)==0){r5=0;STACKTOP=r1;return r5}r3=_newSHA512object();if((r3|0)==0){_PyBuffer_Release(r4);r5=0;STACKTOP=r1;return r5}_sha512_init(r3);if((_PyErr_Occurred()|0)==0){r2=HEAP32[r4+8>>2];if((r2|0)>0){_sha512_update(r3,HEAP32[r4>>2],r2)}_PyBuffer_Release(r4);r5=r3;STACKTOP=r1;return r5}else{r2=r3|0;r6=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r6;if((r6|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r3+4>>2]+24>>2]](r3)}_PyBuffer_Release(r4);r5=0;STACKTOP=r1;return r5}}function _SHA384_new(r1,r2,r3){var r4,r5,r6;r1=STACKTOP;STACKTOP=STACKTOP+52|0;r4=r1;_memset(r4,0,52);if((_PyArg_ParseTupleAndKeywords(r2,r3,__str4|0,_SHA384_new_kwlist|0,(tempInt=STACKTOP,STACKTOP=STACKTOP+4|0,HEAP32[tempInt>>2]=r4,tempInt))|0)==0){r5=0;STACKTOP=r1;return r5}r3=_newSHA384object();if((r3|0)==0){_PyBuffer_Release(r4);r5=0;STACKTOP=r1;return r5}_sha384_init(r3);if((_PyErr_Occurred()|0)==0){r2=HEAP32[r4+8>>2];if((r2|0)>0){_sha512_update(r3,HEAP32[r4>>2],r2)}_PyBuffer_Release(r4);r5=r3;STACKTOP=r1;return r5}else{r2=r3|0;r6=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r6;if((r6|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r3+4>>2]+24>>2]](r3)}_PyBuffer_Release(r4);r5=0;STACKTOP=r1;return r5}}function _newSHA384object(){return __PyObject_New(_SHA384type)}function _sha512_update(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r4=r1+72|0;r5=_llvm_uadd_with_overflow_i32(HEAP32[r4>>2],r3<<3);if(tempRet0){r6=r1+76|0;HEAP32[r6>>2]=HEAP32[r6>>2]+1|0}HEAP32[r4>>2]=r5;r5=r1+76|0;HEAP32[r5>>2]=HEAP32[r5>>2]+(r3>>>29)|0;r5=(r1+212|0)>>2;r4=HEAP32[r5];do{if((r4|0)==0){r7=r2;r8=r3}else{r6=128-r4|0;r9=(r6|0)>(r3|0)?r3:r6;_memcpy(r1+(r4+80)|0,r2,r9);r6=HEAP32[r5]+r9|0;HEAP32[r5]=r6;if((r6|0)==128){_sha512_transform(r1);r7=r2+r9|0;r8=r3-r9|0;break}else{return}}}while(0);r3=r1+80|0;if((r8|0)>127){r2=r8-128|0;r4=r2&-128;r9=r4+128|0;r6=r8;r10=r7;while(1){_memcpy(r3,r10,128);r11=r6-128|0;_sha512_transform(r1);if((r11|0)>127){r6=r11;r10=r10+128|0}else{break}}r12=r2-r4|0;r13=r7+r9|0}else{r12=r8;r13=r7}_memcpy(r3,r13,r12);HEAP32[r5]=r12;return}function _sha512_transform(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r2=STACKTOP;STACKTOP=STACKTOP+704|0;r3=r2;r4=r2+64;_memcpy(r4,r1+80|0,128);r5=r4|0;_longReverse(r5,HEAP32[r1+208>>2]);r6=16;while(1){r7=(r6-2<<3)+r4|0;r8=HEAP32[r7>>2];r9=HEAP32[r7+4>>2];r7=(r6-7<<3)+r4|0;r10=(r6-15<<3)+r4|0;r11=HEAP32[r10>>2];r12=HEAP32[r10+4>>2];r10=(r6-16<<3)+r4|0;r13=(r6<<3)+r4|0;HEAP32[r13>>2]=_i64Add(_i64Add(_i64Add(HEAP32[r10>>2],HEAP32[r10+4>>2],HEAP32[r7>>2],HEAP32[r7+4>>2]),tempRet0,(r9>>>29|0<<3|(r8<<3|0>>>29))^(r8>>>6|r9<<26)^(r8>>>19|r9<<13|(0<<13|0>>>19)),(0>>>29|0<<3|(r9<<3|r8>>>29))^(r9>>>6|0<<26)^(r9>>>19|0<<13|(r8<<13|0>>>19))),tempRet0,(r11>>>8|r12<<24|(0<<24|0>>>8))^(r11>>>7|r12<<25)^(r11>>>1|r12<<31|(0<<31|0>>>1)),(r12>>>8|0<<24|(r11<<24|0>>>8))^(r12>>>7|0<<25)^(r12>>>1|0<<31|(r11<<31|0>>>1)));HEAP32[r13+4>>2]=tempRet0;r13=r6+1|0;if((r13|0)==80){break}else{r6=r13}}_memcpy(r3,r1+8|0,64);r6=(r3+56|0)>>2;r13=(r3+32|0)>>2;r11=HEAP32[r13];r12=HEAP32[r13+1];r8=(r3+48|0)>>2;r9=HEAP32[r8];r7=HEAP32[r8+1];r10=(r3+40|0)>>2;r14=(HEAP32[r10]^r9)&r11^r9;r9=(HEAP32[r10+1]^r7)&r12^r7;r7=HEAP32[r5>>2];r15=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],-685199838,1116352408),tempRet0,r7,r15),tempRet0,(r11>>>14|r12<<18|(0<<18|0>>>14))^(r11>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r11<<23|0>>>9)),(r12>>>14|0<<18|(r11<<18|0>>>14))^(r12>>>18|0<<14|(r11<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r11>>>9))),tempRet0,r14,r9);r9=tempRet0;r14=(r3|0)>>2;r11=HEAP32[r14];r12=HEAP32[r14+1];r15=(r3+8|0)>>2;r7=HEAP32[r15];r16=HEAP32[r15+1];r17=(r3+16|0)>>2;r18=(r7|r11)&HEAP32[r17]|r7&r11;r7=(r16|r12)&HEAP32[r17+1]|r16&r12;r16=(r3+24|0)>>2;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r5,r9);HEAP32[r16+1]=tempRet0;r19=_i64Add(_i64Add(r18,r7,r5,r9),tempRet0,(r11>>>28|r12<<4|(0<<4|0>>>28))^(r12>>>2|0<<30|(r11<<30|0>>>2))^(r12>>>7|0<<25|(r11<<25|0>>>7)),(r12>>>28|0<<4|(r11<<4|0>>>28))^(0>>>2|0<<30|(r12<<30|r11>>>2))^(0>>>7|0<<25|(r12<<25|r11>>>7)));r11=tempRet0;HEAP32[r6]=r19;HEAP32[r6+1]=r11;r12=HEAP32[r16];r9=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r12^r5;r5=(HEAP32[r13+1]^r7)&r9^r7;r7=r4+8|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],602891725,1899447441),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r12=HEAP32[r14+1];r9=(r18|r19)&HEAP32[r15]|r18&r19;r18=(r12|r11)&HEAP32[r15+1]|r12&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r12=_i64Add(_i64Add(r7,r5,(r19>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r19<<30|0>>>2))^(r11>>>7|0<<25|(r19<<25|0>>>7)),(r11>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r19>>>2))^(0>>>7|0<<25|(r11<<25|r19>>>7))),tempRet0,r9,r18);r18=tempRet0;HEAP32[r8]=r12;HEAP32[r8+1]=r18;r9=HEAP32[r17];r19=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r9^r11;r11=(HEAP32[r16+1]^r5)&r19^r5;r5=r4+16|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],-330482897,-1245643825),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r9=HEAP32[r6+1];r19=(r7|r12)&HEAP32[r14]|r7&r12;r7=(r9|r18)&HEAP32[r14+1]|r9&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r9=_i64Add(_i64Add(r5,r11,(r12>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r12<<30|0>>>2))^(r18>>>7|0<<25|(r12<<25|0>>>7)),(r18>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r12>>>2))^(0>>>7|0<<25|(r18<<25|r12>>>7))),tempRet0,r19,r7);r7=tempRet0;HEAP32[r10]=r9;HEAP32[r10+1]=r7;r19=HEAP32[r15];r12=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r19^r18;r18=(HEAP32[r17+1]^r11)&r12^r11;r11=r4+24|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],-2121671748,-373957723),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r19=HEAP32[r8+1];r12=(r5|r9)&HEAP32[r6]|r5&r9;r5=(r19|r7)&HEAP32[r6+1]|r19&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r19=_i64Add(_i64Add(r11,r18,(r9>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r9<<30|0>>>2))^(r7>>>7|0<<25|(r9<<25|0>>>7)),(r7>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r9>>>2))^(0>>>7|0<<25|(r7<<25|r9>>>7))),tempRet0,r12,r5);r5=tempRet0;HEAP32[r13]=r19;HEAP32[r13+1]=r5;r12=HEAP32[r14];r9=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r12^r7;r7=(HEAP32[r15+1]^r18)&r9^r18;r18=r4+32|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],-213338824,961987163),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r12=HEAP32[r10+1];r9=(r11|r19)&HEAP32[r8]|r11&r19;r11=(r12|r5)&HEAP32[r8+1]|r12&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r12=_i64Add(_i64Add(r18,r7,(r19>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r19<<30|0>>>2))^(r5>>>7|0<<25|(r19<<25|0>>>7)),(r5>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r19>>>2))^(0>>>7|0<<25|(r5<<25|r19>>>7))),tempRet0,r9,r11);r11=tempRet0;HEAP32[r16]=r12;HEAP32[r16+1]=r11;r9=HEAP32[r6];r19=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r9^r5;r5=(HEAP32[r14+1]^r7)&r19^r7;r7=r4+40|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],-1241133031,1508970993),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r9=HEAP32[r13+1];r19=(r18|r12)&HEAP32[r10]|r18&r12;r18=(r9|r11)&HEAP32[r10+1]|r9&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r9=_i64Add(_i64Add(r7,r5,(r12>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r12<<30|0>>>2))^(r11>>>7|0<<25|(r12<<25|0>>>7)),(r11>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r12>>>2))^(0>>>7|0<<25|(r11<<25|r12>>>7))),tempRet0,r19,r18);r18=tempRet0;HEAP32[r17]=r9;HEAP32[r17+1]=r18;r19=HEAP32[r8];r12=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r19^r11;r11=(HEAP32[r6+1]^r5)&r12^r5;r5=r4+48|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],-1357295717,-1841331548),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r19=HEAP32[r16+1];r12=(r7|r9)&HEAP32[r13]|r7&r9;r7=(r19|r18)&HEAP32[r13+1]|r19&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r19=_i64Add(_i64Add(r5,r11,(r9>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r9<<30|0>>>2))^(r18>>>7|0<<25|(r9<<25|0>>>7)),(r18>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r9>>>2))^(0>>>7|0<<25|(r18<<25|r9>>>7))),tempRet0,r12,r7);r7=tempRet0;HEAP32[r15]=r19;HEAP32[r15+1]=r7;r12=HEAP32[r10];r9=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r12^r18;r18=(HEAP32[r8+1]^r11)&r9^r11;r11=r4+56|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],-630357736,-1424204075),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r12=HEAP32[r17+1];r9=(r5|r19)&HEAP32[r16]|r5&r19;r5=(r12|r7)&HEAP32[r16+1]|r12&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r12=_i64Add(_i64Add(r11,r18,(r19>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r19<<30|0>>>2))^(r7>>>7|0<<25|(r19<<25|0>>>7)),(r7>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r19>>>2))^(0>>>7|0<<25|(r7<<25|r19>>>7))),tempRet0,r9,r5);r5=tempRet0;HEAP32[r14]=r12;HEAP32[r14+1]=r5;r9=HEAP32[r13];r19=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r9^r7;r7=(HEAP32[r10+1]^r18)&r19^r18;r18=r4+64|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],-1560083902,-670586216),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r9=HEAP32[r15+1];r19=(r11|r12)&HEAP32[r17]|r11&r12;r11=(r9|r5)&HEAP32[r17+1]|r9&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r9=_i64Add(_i64Add(r18,r7,(r12>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r12<<30|0>>>2))^(r5>>>7|0<<25|(r12<<25|0>>>7)),(r5>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r12>>>2))^(0>>>7|0<<25|(r5<<25|r12>>>7))),tempRet0,r19,r11);r11=tempRet0;HEAP32[r6]=r9;HEAP32[r6+1]=r11;r19=HEAP32[r16];r12=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r19^r5;r5=(HEAP32[r13+1]^r7)&r12^r7;r7=r4+72|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],1164996542,310598401),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r19=HEAP32[r14+1];r12=(r18|r9)&HEAP32[r15]|r18&r9;r18=(r19|r11)&HEAP32[r15+1]|r19&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r19=_i64Add(_i64Add(r7,r5,(r9>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r9<<30|0>>>2))^(r11>>>7|0<<25|(r9<<25|0>>>7)),(r11>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r9>>>2))^(0>>>7|0<<25|(r11<<25|r9>>>7))),tempRet0,r12,r18);r18=tempRet0;HEAP32[r8]=r19;HEAP32[r8+1]=r18;r12=HEAP32[r17];r9=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r12^r11;r11=(HEAP32[r16+1]^r5)&r9^r5;r5=r4+80|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],1323610764,607225278),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r12=HEAP32[r6+1];r9=(r7|r19)&HEAP32[r14]|r7&r19;r7=(r12|r18)&HEAP32[r14+1]|r12&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r12=_i64Add(_i64Add(r5,r11,(r19>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r19<<30|0>>>2))^(r18>>>7|0<<25|(r19<<25|0>>>7)),(r18>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r19>>>2))^(0>>>7|0<<25|(r18<<25|r19>>>7))),tempRet0,r9,r7);r7=tempRet0;HEAP32[r10]=r12;HEAP32[r10+1]=r7;r9=HEAP32[r15];r19=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r9^r18;r18=(HEAP32[r17+1]^r11)&r19^r11;r11=r4+88|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],-704662302,1426881987),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r9=HEAP32[r8+1];r19=(r5|r12)&HEAP32[r6]|r5&r12;r5=(r9|r7)&HEAP32[r6+1]|r9&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r9=_i64Add(_i64Add(r11,r18,(r12>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r12<<30|0>>>2))^(r7>>>7|0<<25|(r12<<25|0>>>7)),(r7>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r12>>>2))^(0>>>7|0<<25|(r7<<25|r12>>>7))),tempRet0,r19,r5);r5=tempRet0;HEAP32[r13]=r9;HEAP32[r13+1]=r5;r19=HEAP32[r14];r12=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r19^r7;r7=(HEAP32[r15+1]^r18)&r12^r18;r18=r4+96|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],-226784913,1925078388),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r19=HEAP32[r10+1];r12=(r11|r9)&HEAP32[r8]|r11&r9;r11=(r19|r5)&HEAP32[r8+1]|r19&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r19=_i64Add(_i64Add(r18,r7,(r9>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r9<<30|0>>>2))^(r5>>>7|0<<25|(r9<<25|0>>>7)),(r5>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r9>>>2))^(0>>>7|0<<25|(r5<<25|r9>>>7))),tempRet0,r12,r11);r11=tempRet0;HEAP32[r16]=r19;HEAP32[r16+1]=r11;r12=HEAP32[r6];r9=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r12^r5;r5=(HEAP32[r14+1]^r7)&r9^r7;r7=r4+104|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],991336113,-2132889090),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r12=HEAP32[r13+1];r9=(r18|r19)&HEAP32[r10]|r18&r19;r18=(r12|r11)&HEAP32[r10+1]|r12&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r12=_i64Add(_i64Add(r7,r5,(r19>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r19<<30|0>>>2))^(r11>>>7|0<<25|(r19<<25|0>>>7)),(r11>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r19>>>2))^(0>>>7|0<<25|(r11<<25|r19>>>7))),tempRet0,r9,r18);r18=tempRet0;HEAP32[r17]=r12;HEAP32[r17+1]=r18;r9=HEAP32[r8];r19=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r9^r11;r11=(HEAP32[r6+1]^r5)&r19^r5;r5=r4+112|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],633803317,-1680079193),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r9=HEAP32[r16+1];r19=(r7|r12)&HEAP32[r13]|r7&r12;r7=(r9|r18)&HEAP32[r13+1]|r9&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r9=_i64Add(_i64Add(r5,r11,(r12>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r12<<30|0>>>2))^(r18>>>7|0<<25|(r12<<25|0>>>7)),(r18>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r12>>>2))^(0>>>7|0<<25|(r18<<25|r12>>>7))),tempRet0,r19,r7);r7=tempRet0;HEAP32[r15]=r9;HEAP32[r15+1]=r7;r19=HEAP32[r10];r12=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r19^r18;r18=(HEAP32[r8+1]^r11)&r12^r11;r11=r4+120|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],-815192428,-1046744716),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r19=HEAP32[r17+1];r12=(r5|r9)&HEAP32[r16]|r5&r9;r5=(r19|r7)&HEAP32[r16+1]|r19&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r19=_i64Add(_i64Add(r11,r18,(r9>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r9<<30|0>>>2))^(r7>>>7|0<<25|(r9<<25|0>>>7)),(r7>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r9>>>2))^(0>>>7|0<<25|(r7<<25|r9>>>7))),tempRet0,r12,r5);r5=tempRet0;HEAP32[r14]=r19;HEAP32[r14+1]=r5;r12=HEAP32[r13];r9=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r12^r7;r7=(HEAP32[r10+1]^r18)&r9^r18;r18=r4+128|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],-1628353838,-459576895),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r12=HEAP32[r15+1];r9=(r11|r19)&HEAP32[r17]|r11&r19;r11=(r12|r5)&HEAP32[r17+1]|r12&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r12=_i64Add(_i64Add(r18,r7,(r19>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r19<<30|0>>>2))^(r5>>>7|0<<25|(r19<<25|0>>>7)),(r5>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r19>>>2))^(0>>>7|0<<25|(r5<<25|r19>>>7))),tempRet0,r9,r11);r11=tempRet0;HEAP32[r6]=r12;HEAP32[r6+1]=r11;r9=HEAP32[r16];r19=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r9^r5;r5=(HEAP32[r13+1]^r7)&r19^r7;r7=r4+136|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],944711139,-272742522),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r9=HEAP32[r14+1];r19=(r18|r12)&HEAP32[r15]|r18&r12;r18=(r9|r11)&HEAP32[r15+1]|r9&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r9=_i64Add(_i64Add(r7,r5,(r12>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r12<<30|0>>>2))^(r11>>>7|0<<25|(r12<<25|0>>>7)),(r11>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r12>>>2))^(0>>>7|0<<25|(r11<<25|r12>>>7))),tempRet0,r19,r18);r18=tempRet0;HEAP32[r8]=r9;HEAP32[r8+1]=r18;r19=HEAP32[r17];r12=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r19^r11;r11=(HEAP32[r16+1]^r5)&r12^r5;r5=r4+144|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],-1953704523,264347078),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r19=HEAP32[r6+1];r12=(r7|r9)&HEAP32[r14]|r7&r9;r7=(r19|r18)&HEAP32[r14+1]|r19&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r19=_i64Add(_i64Add(r5,r11,(r9>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r9<<30|0>>>2))^(r18>>>7|0<<25|(r9<<25|0>>>7)),(r18>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r9>>>2))^(0>>>7|0<<25|(r18<<25|r9>>>7))),tempRet0,r12,r7);r7=tempRet0;HEAP32[r10]=r19;HEAP32[r10+1]=r7;r12=HEAP32[r15];r9=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r12^r18;r18=(HEAP32[r17+1]^r11)&r9^r11;r11=r4+152|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],2007800933,604807628),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r12=HEAP32[r8+1];r9=(r5|r19)&HEAP32[r6]|r5&r19;r5=(r12|r7)&HEAP32[r6+1]|r12&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r12=_i64Add(_i64Add(r11,r18,(r19>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r19<<30|0>>>2))^(r7>>>7|0<<25|(r19<<25|0>>>7)),(r7>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r19>>>2))^(0>>>7|0<<25|(r7<<25|r19>>>7))),tempRet0,r9,r5);r5=tempRet0;HEAP32[r13]=r12;HEAP32[r13+1]=r5;r9=HEAP32[r14];r19=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r9^r7;r7=(HEAP32[r15+1]^r18)&r19^r18;r18=r4+160|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],1495990901,770255983),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r9=HEAP32[r10+1];r19=(r11|r12)&HEAP32[r8]|r11&r12;r11=(r9|r5)&HEAP32[r8+1]|r9&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r9=_i64Add(_i64Add(r18,r7,(r12>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r12<<30|0>>>2))^(r5>>>7|0<<25|(r12<<25|0>>>7)),(r5>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r12>>>2))^(0>>>7|0<<25|(r5<<25|r12>>>7))),tempRet0,r19,r11);r11=tempRet0;HEAP32[r16]=r9;HEAP32[r16+1]=r11;r19=HEAP32[r6];r12=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r19^r5;r5=(HEAP32[r14+1]^r7)&r12^r7;r7=r4+168|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],1856431235,1249150122),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r19=HEAP32[r13+1];r12=(r18|r9)&HEAP32[r10]|r18&r9;r18=(r19|r11)&HEAP32[r10+1]|r19&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r19=_i64Add(_i64Add(r7,r5,(r9>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r9<<30|0>>>2))^(r11>>>7|0<<25|(r9<<25|0>>>7)),(r11>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r9>>>2))^(0>>>7|0<<25|(r11<<25|r9>>>7))),tempRet0,r12,r18);r18=tempRet0;HEAP32[r17]=r19;HEAP32[r17+1]=r18;r12=HEAP32[r8];r9=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r12^r11;r11=(HEAP32[r6+1]^r5)&r9^r5;r5=r4+176|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],-1119749164,1555081692),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r12=HEAP32[r16+1];r9=(r7|r19)&HEAP32[r13]|r7&r19;r7=(r12|r18)&HEAP32[r13+1]|r12&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r12=_i64Add(_i64Add(r5,r11,(r19>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r19<<30|0>>>2))^(r18>>>7|0<<25|(r19<<25|0>>>7)),(r18>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r19>>>2))^(0>>>7|0<<25|(r18<<25|r19>>>7))),tempRet0,r9,r7);r7=tempRet0;HEAP32[r15]=r12;HEAP32[r15+1]=r7;r9=HEAP32[r10];r19=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r9^r18;r18=(HEAP32[r8+1]^r11)&r19^r11;r11=r4+184|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],-2096016459,1996064986),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r9=HEAP32[r17+1];r19=(r5|r12)&HEAP32[r16]|r5&r12;r5=(r9|r7)&HEAP32[r16+1]|r9&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r9=_i64Add(_i64Add(r11,r18,(r12>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r12<<30|0>>>2))^(r7>>>7|0<<25|(r12<<25|0>>>7)),(r7>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r12>>>2))^(0>>>7|0<<25|(r7<<25|r12>>>7))),tempRet0,r19,r5);r5=tempRet0;HEAP32[r14]=r9;HEAP32[r14+1]=r5;r19=HEAP32[r13];r12=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r19^r7;r7=(HEAP32[r10+1]^r18)&r12^r18;r18=r4+192|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],-295247957,-1740746414),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r19=HEAP32[r15+1];r12=(r11|r9)&HEAP32[r17]|r11&r9;r11=(r19|r5)&HEAP32[r17+1]|r19&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r19=_i64Add(_i64Add(r18,r7,(r9>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r9<<30|0>>>2))^(r5>>>7|0<<25|(r9<<25|0>>>7)),(r5>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r9>>>2))^(0>>>7|0<<25|(r5<<25|r9>>>7))),tempRet0,r12,r11);r11=tempRet0;HEAP32[r6]=r19;HEAP32[r6+1]=r11;r12=HEAP32[r16];r9=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r12^r5;r5=(HEAP32[r13+1]^r7)&r9^r7;r7=r4+200|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],766784016,-1473132947),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r12=HEAP32[r14+1];r9=(r18|r19)&HEAP32[r15]|r18&r19;r18=(r12|r11)&HEAP32[r15+1]|r12&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r12=_i64Add(_i64Add(r7,r5,(r19>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r19<<30|0>>>2))^(r11>>>7|0<<25|(r19<<25|0>>>7)),(r11>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r19>>>2))^(0>>>7|0<<25|(r11<<25|r19>>>7))),tempRet0,r9,r18);r18=tempRet0;HEAP32[r8]=r12;HEAP32[r8+1]=r18;r9=HEAP32[r17];r19=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r9^r11;r11=(HEAP32[r16+1]^r5)&r19^r5;r5=r4+208|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],-1728372417,-1341970488),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r9=HEAP32[r6+1];r19=(r7|r12)&HEAP32[r14]|r7&r12;r7=(r9|r18)&HEAP32[r14+1]|r9&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r9=_i64Add(_i64Add(r5,r11,(r12>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r12<<30|0>>>2))^(r18>>>7|0<<25|(r12<<25|0>>>7)),(r18>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r12>>>2))^(0>>>7|0<<25|(r18<<25|r12>>>7))),tempRet0,r19,r7);r7=tempRet0;HEAP32[r10]=r9;HEAP32[r10+1]=r7;r19=HEAP32[r15];r12=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r19^r18;r18=(HEAP32[r17+1]^r11)&r12^r11;r11=r4+216|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],-1091629340,-1084653625),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r19=HEAP32[r8+1];r12=(r5|r9)&HEAP32[r6]|r5&r9;r5=(r19|r7)&HEAP32[r6+1]|r19&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r19=_i64Add(_i64Add(r11,r18,(r9>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r9<<30|0>>>2))^(r7>>>7|0<<25|(r9<<25|0>>>7)),(r7>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r9>>>2))^(0>>>7|0<<25|(r7<<25|r9>>>7))),tempRet0,r12,r5);r5=tempRet0;HEAP32[r13]=r19;HEAP32[r13+1]=r5;r12=HEAP32[r14];r9=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r12^r7;r7=(HEAP32[r15+1]^r18)&r9^r18;r18=r4+224|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],1034457026,-958395405),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r12=HEAP32[r10+1];r9=(r11|r19)&HEAP32[r8]|r11&r19;r11=(r12|r5)&HEAP32[r8+1]|r12&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r12=_i64Add(_i64Add(r18,r7,(r19>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r19<<30|0>>>2))^(r5>>>7|0<<25|(r19<<25|0>>>7)),(r5>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r19>>>2))^(0>>>7|0<<25|(r5<<25|r19>>>7))),tempRet0,r9,r11);r11=tempRet0;HEAP32[r16]=r12;HEAP32[r16+1]=r11;r9=HEAP32[r6];r19=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r9^r5;r5=(HEAP32[r14+1]^r7)&r19^r7;r7=r4+232|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],-1828018395,-710438585),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r9=HEAP32[r13+1];r19=(r18|r12)&HEAP32[r10]|r18&r12;r18=(r9|r11)&HEAP32[r10+1]|r9&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r9=_i64Add(_i64Add(r7,r5,(r12>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r12<<30|0>>>2))^(r11>>>7|0<<25|(r12<<25|0>>>7)),(r11>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r12>>>2))^(0>>>7|0<<25|(r11<<25|r12>>>7))),tempRet0,r19,r18);r18=tempRet0;HEAP32[r17]=r9;HEAP32[r17+1]=r18;r19=HEAP32[r8];r12=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r19^r11;r11=(HEAP32[r6+1]^r5)&r12^r5;r5=r4+240|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],-536640913,113926993),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r19=HEAP32[r16+1];r12=(r7|r9)&HEAP32[r13]|r7&r9;r7=(r19|r18)&HEAP32[r13+1]|r19&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r19=_i64Add(_i64Add(r5,r11,(r9>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r9<<30|0>>>2))^(r18>>>7|0<<25|(r9<<25|0>>>7)),(r18>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r9>>>2))^(0>>>7|0<<25|(r18<<25|r9>>>7))),tempRet0,r12,r7);r7=tempRet0;HEAP32[r15]=r19;HEAP32[r15+1]=r7;r12=HEAP32[r10];r9=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r12^r18;r18=(HEAP32[r8+1]^r11)&r9^r11;r11=r4+248|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],168717936,338241895),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r12=HEAP32[r17+1];r9=(r5|r19)&HEAP32[r16]|r5&r19;r5=(r12|r7)&HEAP32[r16+1]|r12&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r12=_i64Add(_i64Add(r11,r18,(r19>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r19<<30|0>>>2))^(r7>>>7|0<<25|(r19<<25|0>>>7)),(r7>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r19>>>2))^(0>>>7|0<<25|(r7<<25|r19>>>7))),tempRet0,r9,r5);r5=tempRet0;HEAP32[r14]=r12;HEAP32[r14+1]=r5;r9=HEAP32[r13];r19=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r9^r7;r7=(HEAP32[r10+1]^r18)&r19^r18;r18=r4+256|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],1188179964,666307205),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r9=HEAP32[r15+1];r19=(r11|r12)&HEAP32[r17]|r11&r12;r11=(r9|r5)&HEAP32[r17+1]|r9&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r9=_i64Add(_i64Add(r18,r7,(r12>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r12<<30|0>>>2))^(r5>>>7|0<<25|(r12<<25|0>>>7)),(r5>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r12>>>2))^(0>>>7|0<<25|(r5<<25|r12>>>7))),tempRet0,r19,r11);r11=tempRet0;HEAP32[r6]=r9;HEAP32[r6+1]=r11;r19=HEAP32[r16];r12=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r19^r5;r5=(HEAP32[r13+1]^r7)&r12^r7;r7=r4+264|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],1546045734,773529912),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r19=HEAP32[r14+1];r12=(r18|r9)&HEAP32[r15]|r18&r9;r18=(r19|r11)&HEAP32[r15+1]|r19&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r19=_i64Add(_i64Add(r7,r5,(r9>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r9<<30|0>>>2))^(r11>>>7|0<<25|(r9<<25|0>>>7)),(r11>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r9>>>2))^(0>>>7|0<<25|(r11<<25|r9>>>7))),tempRet0,r12,r18);r18=tempRet0;HEAP32[r8]=r19;HEAP32[r8+1]=r18;r12=HEAP32[r17];r9=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r12^r11;r11=(HEAP32[r16+1]^r5)&r9^r5;r5=r4+272|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],1522805485,1294757372),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r12=HEAP32[r6+1];r9=(r7|r19)&HEAP32[r14]|r7&r19;r7=(r12|r18)&HEAP32[r14+1]|r12&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r12=_i64Add(_i64Add(r5,r11,(r19>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r19<<30|0>>>2))^(r18>>>7|0<<25|(r19<<25|0>>>7)),(r18>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r19>>>2))^(0>>>7|0<<25|(r18<<25|r19>>>7))),tempRet0,r9,r7);r7=tempRet0;HEAP32[r10]=r12;HEAP32[r10+1]=r7;r9=HEAP32[r15];r19=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r9^r18;r18=(HEAP32[r17+1]^r11)&r19^r11;r11=r4+280|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],-1651133473,1396182291),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r9=HEAP32[r8+1];r19=(r5|r12)&HEAP32[r6]|r5&r12;r5=(r9|r7)&HEAP32[r6+1]|r9&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r9=_i64Add(_i64Add(r11,r18,(r12>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r12<<30|0>>>2))^(r7>>>7|0<<25|(r12<<25|0>>>7)),(r7>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r12>>>2))^(0>>>7|0<<25|(r7<<25|r12>>>7))),tempRet0,r19,r5);r5=tempRet0;HEAP32[r13]=r9;HEAP32[r13+1]=r5;r19=HEAP32[r14];r12=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r19^r7;r7=(HEAP32[r15+1]^r18)&r12^r18;r18=r4+288|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],-1951439906,1695183700),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r19=HEAP32[r10+1];r12=(r11|r9)&HEAP32[r8]|r11&r9;r11=(r19|r5)&HEAP32[r8+1]|r19&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r19=_i64Add(_i64Add(r18,r7,(r9>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r9<<30|0>>>2))^(r5>>>7|0<<25|(r9<<25|0>>>7)),(r5>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r9>>>2))^(0>>>7|0<<25|(r5<<25|r9>>>7))),tempRet0,r12,r11);r11=tempRet0;HEAP32[r16]=r19;HEAP32[r16+1]=r11;r12=HEAP32[r6];r9=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r12^r5;r5=(HEAP32[r14+1]^r7)&r9^r7;r7=r4+296|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],1014477480,1986661051),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r12=HEAP32[r13+1];r9=(r18|r19)&HEAP32[r10]|r18&r19;r18=(r12|r11)&HEAP32[r10+1]|r12&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r12=_i64Add(_i64Add(r7,r5,(r19>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r19<<30|0>>>2))^(r11>>>7|0<<25|(r19<<25|0>>>7)),(r11>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r19>>>2))^(0>>>7|0<<25|(r11<<25|r19>>>7))),tempRet0,r9,r18);r18=tempRet0;HEAP32[r17]=r12;HEAP32[r17+1]=r18;r9=HEAP32[r8];r19=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r9^r11;r11=(HEAP32[r6+1]^r5)&r19^r5;r5=r4+304|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],1206759142,-2117940946),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r9=HEAP32[r16+1];r19=(r7|r12)&HEAP32[r13]|r7&r12;r7=(r9|r18)&HEAP32[r13+1]|r9&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r9=_i64Add(_i64Add(r5,r11,(r12>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r12<<30|0>>>2))^(r18>>>7|0<<25|(r12<<25|0>>>7)),(r18>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r12>>>2))^(0>>>7|0<<25|(r18<<25|r12>>>7))),tempRet0,r19,r7);r7=tempRet0;HEAP32[r15]=r9;HEAP32[r15+1]=r7;r19=HEAP32[r10];r12=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r19^r18;r18=(HEAP32[r8+1]^r11)&r12^r11;r11=r4+312|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],344077627,-1838011259),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r19=HEAP32[r17+1];r12=(r5|r9)&HEAP32[r16]|r5&r9;r5=(r19|r7)&HEAP32[r16+1]|r19&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r19=_i64Add(_i64Add(r11,r18,(r9>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r9<<30|0>>>2))^(r7>>>7|0<<25|(r9<<25|0>>>7)),(r7>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r9>>>2))^(0>>>7|0<<25|(r7<<25|r9>>>7))),tempRet0,r12,r5);r5=tempRet0;HEAP32[r14]=r19;HEAP32[r14+1]=r5;r12=HEAP32[r13];r9=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r12^r7;r7=(HEAP32[r10+1]^r18)&r9^r18;r18=r4+320|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],1290863460,-1564481375),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r12=HEAP32[r15+1];r9=(r11|r19)&HEAP32[r17]|r11&r19;r11=(r12|r5)&HEAP32[r17+1]|r12&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r12=_i64Add(_i64Add(r18,r7,(r19>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r19<<30|0>>>2))^(r5>>>7|0<<25|(r19<<25|0>>>7)),(r5>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r19>>>2))^(0>>>7|0<<25|(r5<<25|r19>>>7))),tempRet0,r9,r11);r11=tempRet0;HEAP32[r6]=r12;HEAP32[r6+1]=r11;r9=HEAP32[r16];r19=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r9^r5;r5=(HEAP32[r13+1]^r7)&r19^r7;r7=r4+328|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],-1136513023,-1474664885),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r9=HEAP32[r14+1];r19=(r18|r12)&HEAP32[r15]|r18&r12;r18=(r9|r11)&HEAP32[r15+1]|r9&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r9=_i64Add(_i64Add(r7,r5,(r12>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r12<<30|0>>>2))^(r11>>>7|0<<25|(r12<<25|0>>>7)),(r11>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r12>>>2))^(0>>>7|0<<25|(r11<<25|r12>>>7))),tempRet0,r19,r18);r18=tempRet0;HEAP32[r8]=r9;HEAP32[r8+1]=r18;r19=HEAP32[r17];r12=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r19^r11;r11=(HEAP32[r16+1]^r5)&r12^r5;r5=r4+336|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],-789014639,-1035236496),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r19=HEAP32[r6+1];r12=(r7|r9)&HEAP32[r14]|r7&r9;r7=(r19|r18)&HEAP32[r14+1]|r19&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r19=_i64Add(_i64Add(r5,r11,(r9>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r9<<30|0>>>2))^(r18>>>7|0<<25|(r9<<25|0>>>7)),(r18>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r9>>>2))^(0>>>7|0<<25|(r18<<25|r9>>>7))),tempRet0,r12,r7);r7=tempRet0;HEAP32[r10]=r19;HEAP32[r10+1]=r7;r12=HEAP32[r15];r9=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r12^r18;r18=(HEAP32[r17+1]^r11)&r9^r11;r11=r4+344|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],106217008,-949202525),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r12=HEAP32[r8+1];r9=(r5|r19)&HEAP32[r6]|r5&r19;r5=(r12|r7)&HEAP32[r6+1]|r12&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r12=_i64Add(_i64Add(r11,r18,(r19>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r19<<30|0>>>2))^(r7>>>7|0<<25|(r19<<25|0>>>7)),(r7>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r19>>>2))^(0>>>7|0<<25|(r7<<25|r19>>>7))),tempRet0,r9,r5);r5=tempRet0;HEAP32[r13]=r12;HEAP32[r13+1]=r5;r9=HEAP32[r14];r19=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r9^r7;r7=(HEAP32[r15+1]^r18)&r19^r18;r18=r4+352|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],-688958952,-778901479),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r9=HEAP32[r10+1];r19=(r11|r12)&HEAP32[r8]|r11&r12;r11=(r9|r5)&HEAP32[r8+1]|r9&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r9=_i64Add(_i64Add(r18,r7,(r12>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r12<<30|0>>>2))^(r5>>>7|0<<25|(r12<<25|0>>>7)),(r5>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r12>>>2))^(0>>>7|0<<25|(r5<<25|r12>>>7))),tempRet0,r19,r11);r11=tempRet0;HEAP32[r16]=r9;HEAP32[r16+1]=r11;r19=HEAP32[r6];r12=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r19^r5;r5=(HEAP32[r14+1]^r7)&r12^r7;r7=r4+360|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],1432725776,-694614492),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r19=HEAP32[r13+1];r12=(r18|r9)&HEAP32[r10]|r18&r9;r18=(r19|r11)&HEAP32[r10+1]|r19&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r19=_i64Add(_i64Add(r7,r5,(r9>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r9<<30|0>>>2))^(r11>>>7|0<<25|(r9<<25|0>>>7)),(r11>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r9>>>2))^(0>>>7|0<<25|(r11<<25|r9>>>7))),tempRet0,r12,r18);r18=tempRet0;HEAP32[r17]=r19;HEAP32[r17+1]=r18;r12=HEAP32[r8];r9=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r12^r11;r11=(HEAP32[r6+1]^r5)&r9^r5;r5=r4+368|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],1467031594,-200395387),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r12=HEAP32[r16+1];r9=(r7|r19)&HEAP32[r13]|r7&r19;r7=(r12|r18)&HEAP32[r13+1]|r12&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r12=_i64Add(_i64Add(r5,r11,(r19>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r19<<30|0>>>2))^(r18>>>7|0<<25|(r19<<25|0>>>7)),(r18>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r19>>>2))^(0>>>7|0<<25|(r18<<25|r19>>>7))),tempRet0,r9,r7);r7=tempRet0;HEAP32[r15]=r12;HEAP32[r15+1]=r7;r9=HEAP32[r10];r19=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r9^r18;r18=(HEAP32[r8+1]^r11)&r19^r11;r11=r4+376|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],851169720,275423344),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r9=HEAP32[r17+1];r19=(r5|r12)&HEAP32[r16]|r5&r12;r5=(r9|r7)&HEAP32[r16+1]|r9&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r9=_i64Add(_i64Add(r11,r18,(r12>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r12<<30|0>>>2))^(r7>>>7|0<<25|(r12<<25|0>>>7)),(r7>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r12>>>2))^(0>>>7|0<<25|(r7<<25|r12>>>7))),tempRet0,r19,r5);r5=tempRet0;HEAP32[r14]=r9;HEAP32[r14+1]=r5;r19=HEAP32[r13];r12=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r19^r7;r7=(HEAP32[r10+1]^r18)&r12^r18;r18=r4+384|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],-1194143544,430227734),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r19=HEAP32[r15+1];r12=(r11|r9)&HEAP32[r17]|r11&r9;r11=(r19|r5)&HEAP32[r17+1]|r19&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r19=_i64Add(_i64Add(r18,r7,(r9>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r9<<30|0>>>2))^(r5>>>7|0<<25|(r9<<25|0>>>7)),(r5>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r9>>>2))^(0>>>7|0<<25|(r5<<25|r9>>>7))),tempRet0,r12,r11);r11=tempRet0;HEAP32[r6]=r19;HEAP32[r6+1]=r11;r12=HEAP32[r16];r9=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r12^r5;r5=(HEAP32[r13+1]^r7)&r9^r7;r7=r4+392|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],1363258195,506948616),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r12=HEAP32[r14+1];r9=(r18|r19)&HEAP32[r15]|r18&r19;r18=(r12|r11)&HEAP32[r15+1]|r12&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r12=_i64Add(_i64Add(r7,r5,(r19>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r19<<30|0>>>2))^(r11>>>7|0<<25|(r19<<25|0>>>7)),(r11>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r19>>>2))^(0>>>7|0<<25|(r11<<25|r19>>>7))),tempRet0,r9,r18);r18=tempRet0;HEAP32[r8]=r12;HEAP32[r8+1]=r18;r9=HEAP32[r17];r19=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r9^r11;r11=(HEAP32[r16+1]^r5)&r19^r5;r5=r4+400|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],-544281703,659060556),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r9=HEAP32[r6+1];r19=(r7|r12)&HEAP32[r14]|r7&r12;r7=(r9|r18)&HEAP32[r14+1]|r9&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r9=_i64Add(_i64Add(r5,r11,(r12>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r12<<30|0>>>2))^(r18>>>7|0<<25|(r12<<25|0>>>7)),(r18>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r12>>>2))^(0>>>7|0<<25|(r18<<25|r12>>>7))),tempRet0,r19,r7);r7=tempRet0;HEAP32[r10]=r9;HEAP32[r10+1]=r7;r19=HEAP32[r15];r12=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r19^r18;r18=(HEAP32[r17+1]^r11)&r12^r11;r11=r4+408|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],-509917016,883997877),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r19=HEAP32[r8+1];r12=(r5|r9)&HEAP32[r6]|r5&r9;r5=(r19|r7)&HEAP32[r6+1]|r19&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r19=_i64Add(_i64Add(r11,r18,(r9>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r9<<30|0>>>2))^(r7>>>7|0<<25|(r9<<25|0>>>7)),(r7>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r9>>>2))^(0>>>7|0<<25|(r7<<25|r9>>>7))),tempRet0,r12,r5);r5=tempRet0;HEAP32[r13]=r19;HEAP32[r13+1]=r5;r12=HEAP32[r14];r9=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r12^r7;r7=(HEAP32[r15+1]^r18)&r9^r18;r18=r4+416|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],-976659869,958139571),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r12=HEAP32[r10+1];r9=(r11|r19)&HEAP32[r8]|r11&r19;r11=(r12|r5)&HEAP32[r8+1]|r12&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r12=_i64Add(_i64Add(r18,r7,(r19>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r19<<30|0>>>2))^(r5>>>7|0<<25|(r19<<25|0>>>7)),(r5>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r19>>>2))^(0>>>7|0<<25|(r5<<25|r19>>>7))),tempRet0,r9,r11);r11=tempRet0;HEAP32[r16]=r12;HEAP32[r16+1]=r11;r9=HEAP32[r6];r19=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r9^r5;r5=(HEAP32[r14+1]^r7)&r19^r7;r7=r4+424|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],-482243893,1322822218),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r9=HEAP32[r13+1];r19=(r18|r12)&HEAP32[r10]|r18&r12;r18=(r9|r11)&HEAP32[r10+1]|r9&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r9=_i64Add(_i64Add(r7,r5,(r12>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r12<<30|0>>>2))^(r11>>>7|0<<25|(r12<<25|0>>>7)),(r11>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r12>>>2))^(0>>>7|0<<25|(r11<<25|r12>>>7))),tempRet0,r19,r18);r18=tempRet0;HEAP32[r17]=r9;HEAP32[r17+1]=r18;r19=HEAP32[r8];r12=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r19^r11;r11=(HEAP32[r6+1]^r5)&r12^r5;r5=r4+432|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],2003034995,1537002063),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r19=HEAP32[r16+1];r12=(r7|r9)&HEAP32[r13]|r7&r9;r7=(r19|r18)&HEAP32[r13+1]|r19&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r19=_i64Add(_i64Add(r5,r11,(r9>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r9<<30|0>>>2))^(r18>>>7|0<<25|(r9<<25|0>>>7)),(r18>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r9>>>2))^(0>>>7|0<<25|(r18<<25|r9>>>7))),tempRet0,r12,r7);r7=tempRet0;HEAP32[r15]=r19;HEAP32[r15+1]=r7;r12=HEAP32[r10];r9=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r12^r18;r18=(HEAP32[r8+1]^r11)&r9^r11;r11=r4+440|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],-692930397,1747873779),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r12=HEAP32[r17+1];r9=(r5|r19)&HEAP32[r16]|r5&r19;r5=(r12|r7)&HEAP32[r16+1]|r12&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r12=_i64Add(_i64Add(r11,r18,(r19>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r19<<30|0>>>2))^(r7>>>7|0<<25|(r19<<25|0>>>7)),(r7>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r19>>>2))^(0>>>7|0<<25|(r7<<25|r19>>>7))),tempRet0,r9,r5);r5=tempRet0;HEAP32[r14]=r12;HEAP32[r14+1]=r5;r9=HEAP32[r13];r19=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r9^r7;r7=(HEAP32[r10+1]^r18)&r19^r18;r18=r4+448|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],1575990012,1955562222),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r9=HEAP32[r15+1];r19=(r11|r12)&HEAP32[r17]|r11&r12;r11=(r9|r5)&HEAP32[r17+1]|r9&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r9=_i64Add(_i64Add(r18,r7,(r12>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r12<<30|0>>>2))^(r5>>>7|0<<25|(r12<<25|0>>>7)),(r5>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r12>>>2))^(0>>>7|0<<25|(r5<<25|r12>>>7))),tempRet0,r19,r11);r11=tempRet0;HEAP32[r6]=r9;HEAP32[r6+1]=r11;r19=HEAP32[r16];r12=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r19^r5;r5=(HEAP32[r13+1]^r7)&r12^r7;r7=r4+456|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],1125592928,2024104815),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r19=HEAP32[r14+1];r12=(r18|r9)&HEAP32[r15]|r18&r9;r18=(r19|r11)&HEAP32[r15+1]|r19&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r19=_i64Add(_i64Add(r7,r5,(r9>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r9<<30|0>>>2))^(r11>>>7|0<<25|(r9<<25|0>>>7)),(r11>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r9>>>2))^(0>>>7|0<<25|(r11<<25|r9>>>7))),tempRet0,r12,r18);r18=tempRet0;HEAP32[r8]=r19;HEAP32[r8+1]=r18;r12=HEAP32[r17];r9=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r12^r11;r11=(HEAP32[r16+1]^r5)&r9^r5;r5=r4+464|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],-1578062990,-2067236844),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r12=HEAP32[r6+1];r9=(r7|r19)&HEAP32[r14]|r7&r19;r7=(r12|r18)&HEAP32[r14+1]|r12&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r12=_i64Add(_i64Add(r5,r11,(r19>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r19<<30|0>>>2))^(r18>>>7|0<<25|(r19<<25|0>>>7)),(r18>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r19>>>2))^(0>>>7|0<<25|(r18<<25|r19>>>7))),tempRet0,r9,r7);r7=tempRet0;HEAP32[r10]=r12;HEAP32[r10+1]=r7;r9=HEAP32[r15];r19=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r9^r18;r18=(HEAP32[r17+1]^r11)&r19^r11;r11=r4+472|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],442776044,-1933114872),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r9=HEAP32[r8+1];r19=(r5|r12)&HEAP32[r6]|r5&r12;r5=(r9|r7)&HEAP32[r6+1]|r9&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r9=_i64Add(_i64Add(r11,r18,(r12>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r12<<30|0>>>2))^(r7>>>7|0<<25|(r12<<25|0>>>7)),(r7>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r12>>>2))^(0>>>7|0<<25|(r7<<25|r12>>>7))),tempRet0,r19,r5);r5=tempRet0;HEAP32[r13]=r9;HEAP32[r13+1]=r5;r19=HEAP32[r14];r12=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r19^r7;r7=(HEAP32[r15+1]^r18)&r12^r18;r18=r4+480|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],593698344,-1866530822),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r19=HEAP32[r10+1];r12=(r11|r9)&HEAP32[r8]|r11&r9;r11=(r19|r5)&HEAP32[r8+1]|r19&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r19=_i64Add(_i64Add(r18,r7,(r9>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r9<<30|0>>>2))^(r5>>>7|0<<25|(r9<<25|0>>>7)),(r5>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r9>>>2))^(0>>>7|0<<25|(r5<<25|r9>>>7))),tempRet0,r12,r11);r11=tempRet0;HEAP32[r16]=r19;HEAP32[r16+1]=r11;r12=HEAP32[r6];r9=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r12^r5;r5=(HEAP32[r14+1]^r7)&r9^r7;r7=r4+488|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],-561857047,-1538233109),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r12=HEAP32[r13+1];r9=(r18|r19)&HEAP32[r10]|r18&r19;r18=(r12|r11)&HEAP32[r10+1]|r12&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r12=_i64Add(_i64Add(r7,r5,(r19>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r19<<30|0>>>2))^(r11>>>7|0<<25|(r19<<25|0>>>7)),(r11>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r19>>>2))^(0>>>7|0<<25|(r11<<25|r19>>>7))),tempRet0,r9,r18);r18=tempRet0;HEAP32[r17]=r12;HEAP32[r17+1]=r18;r9=HEAP32[r8];r19=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r9^r11;r11=(HEAP32[r6+1]^r5)&r19^r5;r5=r4+496|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],-1295615723,-1090935817),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r9=HEAP32[r16+1];r19=(r7|r12)&HEAP32[r13]|r7&r12;r7=(r9|r18)&HEAP32[r13+1]|r9&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r9=_i64Add(_i64Add(r5,r11,(r12>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r12<<30|0>>>2))^(r18>>>7|0<<25|(r12<<25|0>>>7)),(r18>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r12>>>2))^(0>>>7|0<<25|(r18<<25|r12>>>7))),tempRet0,r19,r7);r7=tempRet0;HEAP32[r15]=r9;HEAP32[r15+1]=r7;r19=HEAP32[r10];r12=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r19^r18;r18=(HEAP32[r8+1]^r11)&r12^r11;r11=r4+504|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],-479046869,-965641998),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r19=HEAP32[r17+1];r12=(r5|r9)&HEAP32[r16]|r5&r9;r5=(r19|r7)&HEAP32[r16+1]|r19&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r19=_i64Add(_i64Add(r11,r18,(r9>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r9<<30|0>>>2))^(r7>>>7|0<<25|(r9<<25|0>>>7)),(r7>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r9>>>2))^(0>>>7|0<<25|(r7<<25|r9>>>7))),tempRet0,r12,r5);r5=tempRet0;HEAP32[r14]=r19;HEAP32[r14+1]=r5;r12=HEAP32[r13];r9=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r12^r7;r7=(HEAP32[r10+1]^r18)&r9^r18;r18=r4+512|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],-366583396,-903397682),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r12=HEAP32[r15+1];r9=(r11|r19)&HEAP32[r17]|r11&r19;r11=(r12|r5)&HEAP32[r17+1]|r12&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r12=_i64Add(_i64Add(r18,r7,(r19>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r19<<30|0>>>2))^(r5>>>7|0<<25|(r19<<25|0>>>7)),(r5>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r19>>>2))^(0>>>7|0<<25|(r5<<25|r19>>>7))),tempRet0,r9,r11);r11=tempRet0;HEAP32[r6]=r12;HEAP32[r6+1]=r11;r9=HEAP32[r16];r19=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r9^r5;r5=(HEAP32[r13+1]^r7)&r19^r7;r7=r4+520|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],566280711,-779700025),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r9=HEAP32[r14+1];r19=(r18|r12)&HEAP32[r15]|r18&r12;r18=(r9|r11)&HEAP32[r15+1]|r9&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r9=_i64Add(_i64Add(r7,r5,(r12>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r12<<30|0>>>2))^(r11>>>7|0<<25|(r12<<25|0>>>7)),(r11>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r12>>>2))^(0>>>7|0<<25|(r11<<25|r12>>>7))),tempRet0,r19,r18);r18=tempRet0;HEAP32[r8]=r9;HEAP32[r8+1]=r18;r19=HEAP32[r17];r12=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r19^r11;r11=(HEAP32[r16+1]^r5)&r12^r5;r5=r4+528|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],-840897762,-354779690),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r19=HEAP32[r6+1];r12=(r7|r9)&HEAP32[r14]|r7&r9;r7=(r19|r18)&HEAP32[r14+1]|r19&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r19=_i64Add(_i64Add(r5,r11,(r9>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r9<<30|0>>>2))^(r18>>>7|0<<25|(r9<<25|0>>>7)),(r18>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r9>>>2))^(0>>>7|0<<25|(r18<<25|r9>>>7))),tempRet0,r12,r7);r7=tempRet0;HEAP32[r10]=r19;HEAP32[r10+1]=r7;r12=HEAP32[r15];r9=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r12^r18;r18=(HEAP32[r17+1]^r11)&r9^r11;r11=r4+536|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],-294727304,-176337025),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r12=HEAP32[r8+1];r9=(r5|r19)&HEAP32[r6]|r5&r19;r5=(r12|r7)&HEAP32[r6+1]|r12&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r12=_i64Add(_i64Add(r11,r18,(r19>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r19<<30|0>>>2))^(r7>>>7|0<<25|(r19<<25|0>>>7)),(r7>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r19>>>2))^(0>>>7|0<<25|(r7<<25|r19>>>7))),tempRet0,r9,r5);r5=tempRet0;HEAP32[r13]=r12;HEAP32[r13+1]=r5;r9=HEAP32[r14];r19=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r9^r7;r7=(HEAP32[r15+1]^r18)&r19^r18;r18=r4+544|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],1914138554,116418474),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r9=HEAP32[r10+1];r19=(r11|r12)&HEAP32[r8]|r11&r12;r11=(r9|r5)&HEAP32[r8+1]|r9&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r9=_i64Add(_i64Add(r18,r7,(r12>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r12<<30|0>>>2))^(r5>>>7|0<<25|(r12<<25|0>>>7)),(r5>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r12>>>2))^(0>>>7|0<<25|(r5<<25|r12>>>7))),tempRet0,r19,r11);r11=tempRet0;HEAP32[r16]=r9;HEAP32[r16+1]=r11;r19=HEAP32[r6];r12=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r19^r5;r5=(HEAP32[r14+1]^r7)&r12^r7;r7=r4+552|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],-1563912026,174292421),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r19=HEAP32[r13+1];r12=(r18|r9)&HEAP32[r10]|r18&r9;r18=(r19|r11)&HEAP32[r10+1]|r19&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r19=_i64Add(_i64Add(r7,r5,(r9>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r9<<30|0>>>2))^(r11>>>7|0<<25|(r9<<25|0>>>7)),(r11>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r9>>>2))^(0>>>7|0<<25|(r11<<25|r9>>>7))),tempRet0,r12,r18);r18=tempRet0;HEAP32[r17]=r19;HEAP32[r17+1]=r18;r12=HEAP32[r8];r9=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r12^r11;r11=(HEAP32[r6+1]^r5)&r9^r5;r5=r4+560|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],-1090974290,289380356),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r12=HEAP32[r16+1];r9=(r7|r19)&HEAP32[r13]|r7&r19;r7=(r12|r18)&HEAP32[r13+1]|r12&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r12=_i64Add(_i64Add(r5,r11,(r19>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r19<<30|0>>>2))^(r18>>>7|0<<25|(r19<<25|0>>>7)),(r18>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r19>>>2))^(0>>>7|0<<25|(r18<<25|r19>>>7))),tempRet0,r9,r7);r7=tempRet0;HEAP32[r15]=r12;HEAP32[r15+1]=r7;r9=HEAP32[r10];r19=HEAP32[r10+1];r18=HEAP32[r6];r11=HEAP32[r6+1];r5=(HEAP32[r8]^r18)&r9^r18;r18=(HEAP32[r8+1]^r11)&r19^r11;r11=r4+568|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],320620315,460393269),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r17];r9=HEAP32[r17+1];r19=(r5|r12)&HEAP32[r16]|r5&r12;r5=(r9|r7)&HEAP32[r16+1]|r9&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r11,r18);HEAP32[r13+1]=tempRet0;r9=_i64Add(_i64Add(r11,r18,(r12>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r12<<30|0>>>2))^(r7>>>7|0<<25|(r12<<25|0>>>7)),(r7>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r12>>>2))^(0>>>7|0<<25|(r7<<25|r12>>>7))),tempRet0,r19,r5);r5=tempRet0;HEAP32[r14]=r9;HEAP32[r14+1]=r5;r19=HEAP32[r13];r12=HEAP32[r13+1];r7=HEAP32[r8];r18=HEAP32[r8+1];r11=(HEAP32[r10]^r7)&r19^r7;r7=(HEAP32[r10+1]^r18)&r12^r18;r18=r4+576|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r6],HEAP32[r6+1],587496836,685471733),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r15];r19=HEAP32[r15+1];r12=(r11|r9)&HEAP32[r17]|r11&r9;r11=(r19|r5)&HEAP32[r17+1]|r19&r5;HEAP32[r16]=_i64Add(HEAP32[r16],HEAP32[r16+1],r18,r7);HEAP32[r16+1]=tempRet0;r19=_i64Add(_i64Add(r18,r7,(r9>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r9<<30|0>>>2))^(r5>>>7|0<<25|(r9<<25|0>>>7)),(r5>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r9>>>2))^(0>>>7|0<<25|(r5<<25|r9>>>7))),tempRet0,r12,r11);r11=tempRet0;HEAP32[r6]=r19;HEAP32[r6+1]=r11;r12=HEAP32[r16];r9=HEAP32[r16+1];r5=HEAP32[r10];r7=HEAP32[r10+1];r18=(HEAP32[r13]^r5)&r12^r5;r5=(HEAP32[r13+1]^r7)&r9^r7;r7=r4+584|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r8],HEAP32[r8+1],1086792851,852142971),tempRet0,r20,r21),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r14];r12=HEAP32[r14+1];r9=(r18|r19)&HEAP32[r15]|r18&r19;r18=(r12|r11)&HEAP32[r15+1]|r12&r11;HEAP32[r17]=_i64Add(HEAP32[r17],HEAP32[r17+1],r7,r5);HEAP32[r17+1]=tempRet0;r12=_i64Add(_i64Add(r7,r5,(r19>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r19<<30|0>>>2))^(r11>>>7|0<<25|(r19<<25|0>>>7)),(r11>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r19>>>2))^(0>>>7|0<<25|(r11<<25|r19>>>7))),tempRet0,r9,r18);r18=tempRet0;HEAP32[r8]=r12;HEAP32[r8+1]=r18;r9=HEAP32[r17];r19=HEAP32[r17+1];r11=HEAP32[r13];r5=HEAP32[r13+1];r7=(HEAP32[r16]^r11)&r9^r11;r11=(HEAP32[r16+1]^r5)&r19^r5;r5=r4+592|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r10],HEAP32[r10+1],365543100,1017036298),tempRet0,r21,r20),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r6];r9=HEAP32[r6+1];r19=(r7|r12)&HEAP32[r14]|r7&r12;r7=(r9|r18)&HEAP32[r14+1]|r9&r18;HEAP32[r15]=_i64Add(HEAP32[r15],HEAP32[r15+1],r5,r11);HEAP32[r15+1]=tempRet0;r9=_i64Add(_i64Add(r5,r11,(r12>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r12<<30|0>>>2))^(r18>>>7|0<<25|(r12<<25|0>>>7)),(r18>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r12>>>2))^(0>>>7|0<<25|(r18<<25|r12>>>7))),tempRet0,r19,r7);r7=tempRet0;HEAP32[r10]=r9;HEAP32[r10+1]=r7;r19=HEAP32[r15];r12=HEAP32[r15+1];r18=HEAP32[r16];r11=HEAP32[r16+1];r5=(HEAP32[r17]^r18)&r19^r18;r18=(HEAP32[r17+1]^r11)&r12^r11;r11=r4+600|0;r20=HEAP32[r11>>2];r21=HEAP32[r11+4>>2];r11=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r13],HEAP32[r13+1],-1676669620,1126000580),tempRet0,r20,r21),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r5,r18);r18=tempRet0;r5=HEAP32[r8];r19=HEAP32[r8+1];r12=(r5|r9)&HEAP32[r6]|r5&r9;r5=(r19|r7)&HEAP32[r6+1]|r19&r7;HEAP32[r14]=_i64Add(HEAP32[r14],HEAP32[r14+1],r11,r18);HEAP32[r14+1]=tempRet0;r19=_i64Add(_i64Add(r11,r18,(r9>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r9<<30|0>>>2))^(r7>>>7|0<<25|(r9<<25|0>>>7)),(r7>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r9>>>2))^(0>>>7|0<<25|(r7<<25|r9>>>7))),tempRet0,r12,r5);r5=tempRet0;HEAP32[r13]=r19;HEAP32[r13+1]=r5;r12=HEAP32[r14];r9=HEAP32[r14+1];r7=HEAP32[r17];r18=HEAP32[r17+1];r11=(HEAP32[r15]^r7)&r12^r7;r7=(HEAP32[r15+1]^r18)&r9^r18;r18=r4+608|0;r21=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r16],HEAP32[r16+1],-885112138,1288033470),tempRet0,r21,r20),tempRet0,(r12>>>14|r9<<18|(0<<18|0>>>14))^(r12>>>18|r9<<14|(0<<14|0>>>18))^(r9>>>9|0<<23|(r12<<23|0>>>9)),(r9>>>14|0<<18|(r12<<18|0>>>14))^(r9>>>18|0<<14|(r12<<14|0>>>18))^(0>>>9|0<<23|(r9<<23|r12>>>9))),tempRet0,r11,r7);r7=tempRet0;r11=HEAP32[r10];r12=HEAP32[r10+1];r9=(r11|r19)&HEAP32[r8]|r11&r19;r11=(r12|r5)&HEAP32[r8+1]|r12&r5;HEAP32[r6]=_i64Add(HEAP32[r6],HEAP32[r6+1],r18,r7);HEAP32[r6+1]=tempRet0;r12=_i64Add(_i64Add(r18,r7,(r19>>>28|r5<<4|(0<<4|0>>>28))^(r5>>>2|0<<30|(r19<<30|0>>>2))^(r5>>>7|0<<25|(r19<<25|0>>>7)),(r5>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r5<<30|r19>>>2))^(0>>>7|0<<25|(r5<<25|r19>>>7))),tempRet0,r9,r11);r11=tempRet0;HEAP32[r16]=r12;HEAP32[r16+1]=r11;r9=HEAP32[r6];r19=HEAP32[r6+1];r5=HEAP32[r15];r7=HEAP32[r15+1];r18=(HEAP32[r14]^r5)&r9^r5;r5=(HEAP32[r14+1]^r7)&r19^r7;r7=r4+616|0;r20=HEAP32[r7>>2];r21=HEAP32[r7+4>>2];r7=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r17],HEAP32[r17+1],-60457430,1501505948),tempRet0,r20,r21),tempRet0,(r9>>>14|r19<<18|(0<<18|0>>>14))^(r9>>>18|r19<<14|(0<<14|0>>>18))^(r19>>>9|0<<23|(r9<<23|0>>>9)),(r19>>>14|0<<18|(r9<<18|0>>>14))^(r19>>>18|0<<14|(r9<<14|0>>>18))^(0>>>9|0<<23|(r19<<23|r9>>>9))),tempRet0,r18,r5);r5=tempRet0;r18=HEAP32[r13];r9=HEAP32[r13+1];r19=(r18|r12)&HEAP32[r10]|r18&r12;r18=(r9|r11)&HEAP32[r10+1]|r9&r11;HEAP32[r8]=_i64Add(HEAP32[r8],HEAP32[r8+1],r7,r5);HEAP32[r8+1]=tempRet0;r9=_i64Add(_i64Add(r7,r5,(r12>>>28|r11<<4|(0<<4|0>>>28))^(r11>>>2|0<<30|(r12<<30|0>>>2))^(r11>>>7|0<<25|(r12<<25|0>>>7)),(r11>>>28|0<<4|(r12<<4|0>>>28))^(0>>>2|0<<30|(r11<<30|r12>>>2))^(0>>>7|0<<25|(r11<<25|r12>>>7))),tempRet0,r19,r18);r18=tempRet0;HEAP32[r17]=r9;HEAP32[r17+1]=r18;r19=HEAP32[r8];r12=HEAP32[r8+1];r11=HEAP32[r14];r5=HEAP32[r14+1];r7=(HEAP32[r6]^r11)&r19^r11;r11=(HEAP32[r6+1]^r5)&r12^r5;r5=r4+624|0;r21=HEAP32[r5>>2];r20=HEAP32[r5+4>>2];r5=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r15],HEAP32[r15+1],987167468,1607167915),tempRet0,r21,r20),tempRet0,(r19>>>14|r12<<18|(0<<18|0>>>14))^(r19>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r19<<23|0>>>9)),(r12>>>14|0<<18|(r19<<18|0>>>14))^(r12>>>18|0<<14|(r19<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r19>>>9))),tempRet0,r7,r11);r11=tempRet0;r7=HEAP32[r16];r19=HEAP32[r16+1];r12=(r7|r9)&HEAP32[r13]|r7&r9;r7=(r19|r18)&HEAP32[r13+1]|r19&r18;HEAP32[r10]=_i64Add(HEAP32[r10],HEAP32[r10+1],r5,r11);HEAP32[r10+1]=tempRet0;r19=_i64Add(_i64Add(r5,r11,(r9>>>28|r18<<4|(0<<4|0>>>28))^(r18>>>2|0<<30|(r9<<30|0>>>2))^(r18>>>7|0<<25|(r9<<25|0>>>7)),(r18>>>28|0<<4|(r9<<4|0>>>28))^(0>>>2|0<<30|(r18<<30|r9>>>2))^(0>>>7|0<<25|(r18<<25|r9>>>7))),tempRet0,r12,r7);r7=tempRet0;HEAP32[r15]=r19;HEAP32[r15+1]=r7;r15=HEAP32[r10];r12=HEAP32[r10+1];r10=HEAP32[r6];r9=HEAP32[r6+1];r6=(HEAP32[r8]^r10)&r15^r10;r10=(HEAP32[r8+1]^r9)&r12^r9;r9=r4+632|0;r4=HEAP32[r9>>2];r8=HEAP32[r9+4>>2];r9=_i64Add(_i64Add(_i64Add(_i64Add(HEAP32[r14],HEAP32[r14+1],1246189591,1816402316),tempRet0,r4,r8),tempRet0,(r15>>>14|r12<<18|(0<<18|0>>>14))^(r15>>>18|r12<<14|(0<<14|0>>>18))^(r12>>>9|0<<23|(r15<<23|0>>>9)),(r12>>>14|0<<18|(r15<<18|0>>>14))^(r12>>>18|0<<14|(r15<<14|0>>>18))^(0>>>9|0<<23|(r12<<23|r15>>>9))),tempRet0,r6,r10);r10=tempRet0;r6=HEAP32[r17];r15=HEAP32[r17+1];r17=(r6|r19)&HEAP32[r16]|r6&r19;r6=(r15|r7)&HEAP32[r16+1]|r15&r7;HEAP32[r13]=_i64Add(HEAP32[r13],HEAP32[r13+1],r9,r10);HEAP32[r13+1]=tempRet0;r13=_i64Add(_i64Add(r9,r10,(r19>>>28|r7<<4|(0<<4|0>>>28))^(r7>>>2|0<<30|(r19<<30|0>>>2))^(r7>>>7|0<<25|(r19<<25|0>>>7)),(r7>>>28|0<<4|(r19<<4|0>>>28))^(0>>>2|0<<30|(r7<<30|r19>>>2))^(0>>>7|0<<25|(r7<<25|r19>>>7))),tempRet0,r17,r6);r6=tempRet0;HEAP32[r14]=r13;HEAP32[r14+1]=r6;r14=(r1+8|0)>>2;HEAP32[r14]=_i64Add(r13,r6,HEAP32[r14],HEAP32[r14+1]);HEAP32[r14+1]=tempRet0;r14=(r1+16|0)>>2;r6=r3+8|0;HEAP32[r14]=_i64Add(HEAP32[r6>>2],HEAP32[r6+4>>2],HEAP32[r14],HEAP32[r14+1]);HEAP32[r14+1]=tempRet0;r14=(r1+24|0)>>2;r6=r3+16|0;HEAP32[r14]=_i64Add(HEAP32[r6>>2],HEAP32[r6+4>>2],HEAP32[r14],HEAP32[r14+1]);HEAP32[r14+1]=tempRet0;r14=(r1+32|0)>>2;r6=r3+24|0;HEAP32[r14]=_i64Add(HEAP32[r6>>2],HEAP32[r6+4>>2],HEAP32[r14],HEAP32[r14+1]);HEAP32[r14+1]=tempRet0;r14=(r1+40|0)>>2;r6=r3+32|0;HEAP32[r14]=_i64Add(HEAP32[r6>>2],HEAP32[r6+4>>2],HEAP32[r14],HEAP32[r14+1]);HEAP32[r14+1]=tempRet0;r14=(r1+48|0)>>2;r6=r3+40|0;HEAP32[r14]=_i64Add(HEAP32[r6>>2],HEAP32[r6+4>>2],HEAP32[r14],HEAP32[r14+1]);HEAP32[r14+1]=tempRet0;r14=(r1+56|0)>>2;r6=r3+48|0;HEAP32[r14]=_i64Add(HEAP32[r6>>2],HEAP32[r6+4>>2],HEAP32[r14],HEAP32[r14+1]);HEAP32[r14+1]=tempRet0;r14=(r1+64|0)>>2;r1=r3+56|0;HEAP32[r14]=_i64Add(HEAP32[r1>>2],HEAP32[r1+4>>2],HEAP32[r14],HEAP32[r14+1]);HEAP32[r14+1]=tempRet0;STACKTOP=r2;return}function _longReverse(r1,r2){var r3,r4,r5,r6;if((r2|0)==0){return}else{r3=16;r4=r1}while(1){r1=r3-1|0;r2=HEAP32[r4>>2];r5=HEAP32[r4+4>>2];r6=r4;HEAP8[r6]=(r5>>>24|0<<8)&255;HEAP8[r6+1|0]=(r5>>>16|0<<16)&255;HEAP8[r6+2|0]=(r5>>>8|0<<24)&255;HEAP8[r6+3|0]=r5&255;HEAP8[r6+4|0]=(r2>>>24|r5<<8)&255;HEAP8[r6+5|0]=(r2>>>16|r5<<16)&255;HEAP8[r6+6|0]=(r2>>>8|r5<<24)&255;HEAP8[r6+7|0]=r2&255;if((r1|0)==0){break}else{r3=r1;r4=r4+8|0}}return}function _sha512_init(r1){var r2,r3;r2=r1>>2;HEAP32[r2+52]=1;r3=r1+8|0;HEAP32[r3>>2]=-205731576;HEAP32[r3+4>>2]=1779033703;r3=r1+16|0;HEAP32[r3>>2]=-2067093701;HEAP32[r3+4>>2]=-1150833019;r3=r1+24|0;HEAP32[r3>>2]=-23791573;HEAP32[r3+4>>2]=1013904242;r3=r1+32|0;HEAP32[r3>>2]=1595750129;HEAP32[r3+4>>2]=-1521486534;r3=r1+40|0;HEAP32[r3>>2]=-1377402159;HEAP32[r3+4>>2]=1359893119;r3=r1+48|0;HEAP32[r3>>2]=725511199;HEAP32[r3+4>>2]=-1694144372;r3=r1+56|0;HEAP32[r3>>2]=-79577749;HEAP32[r3+4>>2]=528734635;r3=r1+64|0;HEAP32[r3>>2]=327033209;HEAP32[r3+4>>2]=1541459225;HEAP32[r2+18]=0;HEAP32[r2+19]=0;HEAP32[r2+53]=0;HEAP32[r2+54]=64;return}function _newSHA512object(){return __PyObject_New(_SHA512type)}function _SHA512_dealloc(r1){_PyObject_Free(r1);return}function _SHA512_get_block_size(r1,r2){return _PyInt_FromLong(128)}function _SHA512_get_name(r1,r2){if((HEAP32[r1+216>>2]|0)==64){r1=_PyString_FromStringAndSize(__str8|0,6);return r1}else{r1=_PyString_FromStringAndSize(__str9|0,6);return r1}}function _SHA512_copy(r1,r2){var r3,r4;do{if((HEAP32[r1+4>>2]|0)==(_SHA512type|0)){r2=_newSHA512object();if((r2|0)==0){r3=0}else{r4=r2;break}return r3}else{r2=_newSHA384object();if((r2|0)==0){r3=0}else{r4=r2;break}return r3}}while(0);_SHAcopy(r1,r4);r3=r4;return r3}function _SHA512_digest(r1,r2){var r3,r4;r2=STACKTOP;STACKTOP=STACKTOP+284|0;r3=r2+64;_SHAcopy(r1,r3);r4=r2|0;_sha512_final(r4,r3);r3=_PyString_FromStringAndSize(r4,HEAP32[r1+216>>2]);STACKTOP=r2;return r3}function _SHA512_hexdigest(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11;r2=STACKTOP;STACKTOP=STACKTOP+284|0;r3=r2;r4=r2+64;_SHAcopy(r1,r4);_sha512_final(r3|0,r4);r4=(r1+216|0)>>2;r1=_PyString_FromStringAndSize(0,HEAP32[r4]<<1);if((r1|0)==0){r5=0;STACKTOP=r2;return r5}r6=_PyString_AsString(r1);if((r6|0)==0){r7=r1|0;r8=HEAP32[r7>>2]-1|0;HEAP32[r7>>2]=r8;if((r8|0)!=0){r5=0;STACKTOP=r2;return r5}FUNCTION_TABLE[HEAP32[HEAP32[r1+4>>2]+24>>2]](r1);r5=0;STACKTOP=r2;return r5}else{if((HEAP32[r4]|0)>0){r9=0;r10=0}else{r5=r1;STACKTOP=r2;return r5}while(1){r8=r3+r9|0;r7=HEAP8[r8];r11=(r7&255)>>>4;HEAP8[r6+r10|0]=(r7&255)>159?r11+87&255:r11|48;r11=HEAP8[r8]&15;HEAP8[r6+(r10|1)|0]=(r11&255)>9?r11+87&255:r11|48;r11=r9+1|0;if((r11|0)<(HEAP32[r4]|0)){r9=r11;r10=r10+2|0}else{r5=r1;break}}STACKTOP=r2;return r5}}function _SHA512_update(r1,r2){var r3,r4,r5;r3=STACKTOP;STACKTOP=STACKTOP+52|0;r4=r3;if((_PyArg_ParseTuple(r2,__str16|0,(tempInt=STACKTOP,STACKTOP=STACKTOP+4|0,HEAP32[tempInt>>2]=r4,tempInt))|0)==0){r5=0;STACKTOP=r3;return r5}_sha512_update(r1,HEAP32[r4>>2],HEAP32[r4+8>>2]);_PyBuffer_Release(r4);HEAP32[__Py_NoneStruct>>2]=HEAP32[__Py_NoneStruct>>2]+1|0;r5=__Py_NoneStruct;STACKTOP=r3;return r5}function _SHAcopy(r1,r2){var r3,r4;r3=r2>>2;r4=r1>>2;HEAP32[r3+52]=HEAP32[r4+52];HEAP32[r3+53]=HEAP32[r4+53];HEAP32[r3+54]=HEAP32[r4+54];HEAP32[r3+18]=HEAP32[r4+18];HEAP32[r3+19]=HEAP32[r4+19];_memcpy(r2+8|0,r1+8|0,64);_memcpy(r2+80|0,r1+80|0,128);return}function _sha512_final(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r2+72>>2];r4=HEAP32[r2+76>>2];r5=r3>>>3&127;r6=r5+1|0;HEAP8[r2+(r5+80)|0]=-128;r7=r2+(r6+80)|0;if(r6>>>0>112){_memset(r7,0,r5^127);_sha512_transform(r2);_memset(r2+80|0,0,112)}else{_memset(r7,0,111-r5|0)}r5=r2+192|0;r7=r5|0;tempBigInt=0;HEAP8[r7]=tempBigInt&255;tempBigInt=tempBigInt>>8;HEAP8[r7+1|0]=tempBigInt&255;tempBigInt=tempBigInt>>8;HEAP8[r7+2|0]=tempBigInt&255;tempBigInt=tempBigInt>>8;HEAP8[r7+3|0]=tempBigInt&255;r7=r5+4|0;tempBigInt=0;HEAP8[r7]=tempBigInt&255;tempBigInt=tempBigInt>>8;HEAP8[r7+1|0]=tempBigInt&255;tempBigInt=tempBigInt>>8;HEAP8[r7+2|0]=tempBigInt&255;tempBigInt=tempBigInt>>8;HEAP8[r7+3|0]=tempBigInt&255;HEAP8[r2+200|0]=r4>>>24&255;HEAP8[r2+201|0]=r4>>>16&255;HEAP8[r2+202|0]=r4>>>8&255;HEAP8[r2+203|0]=r4&255;HEAP8[r2+204|0]=r3>>>24&255;HEAP8[r2+205|0]=r3>>>16&255;HEAP8[r2+206|0]=r3>>>8&255;HEAP8[r2+207|0]=r3&255;_sha512_transform(r2);r3=(r2+8|0)>>2;HEAP8[r1]=(HEAP32[r3+1]>>>24|0<<8)&255;HEAP8[r1+1|0]=(HEAP32[r3+1]>>>16|0<<16)&255;HEAP8[r1+2|0]=(HEAP32[r3+1]>>>8|0<<24)&255;HEAP8[r1+3|0]=HEAP32[r3+1]&255;HEAP8[r1+4|0]=(HEAP32[r3]>>>24|HEAP32[r3+1]<<8)&255;HEAP8[r1+5|0]=(HEAP32[r3]>>>16|HEAP32[r3+1]<<16)&255;HEAP8[r1+6|0]=(HEAP32[r3]>>>8|HEAP32[r3+1]<<24)&255;HEAP8[r1+7|0]=HEAP32[r3]&255;r3=(r2+16|0)>>2;HEAP8[r1+8|0]=(HEAP32[r3+1]>>>24|0<<8)&255;HEAP8[r1+9|0]=(HEAP32[r3+1]>>>16|0<<16)&255;HEAP8[r1+10|0]=(HEAP32[r3+1]>>>8|0<<24)&255;HEAP8[r1+11|0]=HEAP32[r3+1]&255;HEAP8[r1+12|0]=(HEAP32[r3]>>>24|HEAP32[r3+1]<<8)&255;HEAP8[r1+13|0]=(HEAP32[r3]>>>16|HEAP32[r3+1]<<16)&255;HEAP8[r1+14|0]=(HEAP32[r3]>>>8|HEAP32[r3+1]<<24)&255;HEAP8[r1+15|0]=HEAP32[r3]&255;r3=(r2+24|0)>>2;HEAP8[r1+16|0]=(HEAP32[r3+1]>>>24|0<<8)&255;HEAP8[r1+17|0]=(HEAP32[r3+1]>>>16|0<<16)&255;HEAP8[r1+18|0]=(HEAP32[r3+1]>>>8|0<<24)&255;HEAP8[r1+19|0]=HEAP32[r3+1]&255;HEAP8[r1+20|0]=(HEAP32[r3]>>>24|HEAP32[r3+1]<<8)&255;HEAP8[r1+21|0]=(HEAP32[r3]>>>16|HEAP32[r3+1]<<16)&255;HEAP8[r1+22|0]=(HEAP32[r3]>>>8|HEAP32[r3+1]<<24)&255;HEAP8[r1+23|0]=HEAP32[r3]&255;r3=(r2+32|0)>>2;HEAP8[r1+24|0]=(HEAP32[r3+1]>>>24|0<<8)&255;HEAP8[r1+25|0]=(HEAP32[r3+1]>>>16|0<<16)&255;HEAP8[r1+26|0]=(HEAP32[r3+1]>>>8|0<<24)&255;HEAP8[r1+27|0]=HEAP32[r3+1]&255;HEAP8[r1+28|0]=(HEAP32[r3]>>>24|HEAP32[r3+1]<<8)&255;HEAP8[r1+29|0]=(HEAP32[r3]>>>16|HEAP32[r3+1]<<16)&255;HEAP8[r1+30|0]=(HEAP32[r3]>>>8|HEAP32[r3+1]<<24)&255;HEAP8[r1+31|0]=HEAP32[r3]&255;r3=(r2+40|0)>>2;HEAP8[r1+32|0]=(HEAP32[r3+1]>>>24|0<<8)&255;HEAP8[r1+33|0]=(HEAP32[r3+1]>>>16|0<<16)&255;HEAP8[r1+34|0]=(HEAP32[r3+1]>>>8|0<<24)&255;HEAP8[r1+35|0]=HEAP32[r3+1]&255;HEAP8[r1+36|0]=(HEAP32[r3]>>>24|HEAP32[r3+1]<<8)&255;HEAP8[r1+37|0]=(HEAP32[r3]>>>16|HEAP32[r3+1]<<16)&255;HEAP8[r1+38|0]=(HEAP32[r3]>>>8|HEAP32[r3+1]<<24)&255;HEAP8[r1+39|0]=HEAP32[r3]&255;r3=(r2+48|0)>>2;HEAP8[r1+40|0]=(HEAP32[r3+1]>>>24|0<<8)&255;HEAP8[r1+41|0]=(HEAP32[r3+1]>>>16|0<<16)&255;HEAP8[r1+42|0]=(HEAP32[r3+1]>>>8|0<<24)&255;HEAP8[r1+43|0]=HEAP32[r3+1]&255;HEAP8[r1+44|0]=(HEAP32[r3]>>>24|HEAP32[r3+1]<<8)&255;HEAP8[r1+45|0]=(HEAP32[r3]>>>16|HEAP32[r3+1]<<16)&255;HEAP8[r1+46|0]=(HEAP32[r3]>>>8|HEAP32[r3+1]<<24)&255;HEAP8[r1+47|0]=HEAP32[r3]&255;r3=(r2+56|0)>>2;HEAP8[r1+48|0]=(HEAP32[r3+1]>>>24|0<<8)&255;HEAP8[r1+49|0]=(HEAP32[r3+1]>>>16|0<<16)&255;HEAP8[r1+50|0]=(HEAP32[r3+1]>>>8|0<<24)&255;HEAP8[r1+51|0]=HEAP32[r3+1]&255;HEAP8[r1+52|0]=(HEAP32[r3]>>>24|HEAP32[r3+1]<<8)&255;HEAP8[r1+53|0]=(HEAP32[r3]>>>16|HEAP32[r3+1]<<16)&255;HEAP8[r1+54|0]=(HEAP32[r3]>>>8|HEAP32[r3+1]<<24)&255;HEAP8[r1+55|0]=HEAP32[r3]&255;r3=(r2+64|0)>>2;HEAP8[r1+56|0]=(HEAP32[r3+1]>>>24|0<<8)&255;HEAP8[r1+57|0]=(HEAP32[r3+1]>>>16|0<<16)&255;HEAP8[r1+58|0]=(HEAP32[r3+1]>>>8|0<<24)&255;HEAP8[r1+59|0]=HEAP32[r3+1]&255;HEAP8[r1+60|0]=(HEAP32[r3]>>>24|HEAP32[r3+1]<<8)&255;HEAP8[r1+61|0]=(HEAP32[r3]>>>16|HEAP32[r3+1]<<16)&255;HEAP8[r1+62|0]=(HEAP32[r3]>>>8|HEAP32[r3+1]<<24)&255;HEAP8[r1+63|0]=HEAP32[r3]&255;return}function _i64Add(r1,r2,r3,r4){var r5,r6;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0;r5=r1+r3>>>0;r6=r2+r4+(r5>>>0<r1>>>0|0)>>>0;return tempRet0=r6,r5|0}function _i64Subtract(r1,r2,r3,r4){var r5,r6;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0;r5=r1-r3>>>0;r6=r2-r4>>>0;r6=r2-r4-(r3>>>0>r1>>>0|0)>>>0;return tempRet0=r6,r5|0}function _bitshift64Shl(r1,r2,r3){var r4;r1=r1|0;r2=r2|0;r3=r3|0;r4=0;if((r3|0)<32){r4=(1<<r3)-1|0;tempRet0=r2<<r3|(r1&r4<<32-r3)>>>32-r3;return r1<<r3}tempRet0=r1<<r3-32;return 0}function _bitshift64Lshr(r1,r2,r3){var r4;r1=r1|0;r2=r2|0;r3=r3|0;r4=0;if((r3|0)<32){r4=(1<<r3)-1|0;tempRet0=r2>>>r3;return r1>>>r3|(r2&r4)<<32-r3}tempRet0=0;return r2>>>r3-32|0}function _bitshift64Ashr(r1,r2,r3){var r4;r1=r1|0;r2=r2|0;r3=r3|0;r4=0;if((r3|0)<32){r4=(1<<r3)-1|0;tempRet0=r2>>r3;return r1>>>r3|(r2&r4)<<32-r3}tempRet0=(r2|0)<0?-1:0;return r2>>r3-32|0}function _llvm_ctlz_i32(r1){var r2;r1=r1|0;r2=0;r2=HEAP8[ctlz_i8+(r1>>>24)|0];if((r2|0)<8)return r2|0;r2=HEAP8[ctlz_i8+(r1>>16&255)|0];if((r2|0)<8)return r2+8|0;r2=HEAP8[ctlz_i8+(r1>>8&255)|0];if((r2|0)<8)return r2+16|0;return HEAP8[ctlz_i8+(r1&255)|0]+24|0}var ctlz_i8=allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_STACK);function _llvm_cttz_i32(r1){var r2;r1=r1|0;r2=0;r2=HEAP8[cttz_i8+(r1&255)|0];if((r2|0)<8)return r2|0;r2=HEAP8[cttz_i8+(r1>>8&255)|0];if((r2|0)<8)return r2+8|0;r2=HEAP8[cttz_i8+(r1>>16&255)|0];if((r2|0)<8)return r2+16|0;return HEAP8[cttz_i8+(r1>>>24)|0]+24|0}var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_STACK);function ___muldsi3(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r1=r1|0;r2=r2|0;r3=0,r4=0,r5=0,r6=0,r7=0,r8=0,r9=0;r3=r1&65535;r4=r2&65535;r5=Math.imul(r4,r3);r6=r1>>>16;r7=(r5>>>16)+Math.imul(r4,r6)|0;r8=r2>>>16;r9=Math.imul(r8,r3);return(tempRet0=(r7>>>16)+Math.imul(r8,r6)+(((r7&65535)+r9|0)>>>16)|0,0|(r7+r9<<16|r5&65535))|0}function ___divdi3(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0,r7=0,r8=0,r9=0,r10=0,r11=0,r12=0,r13=0,r14=0,r15=0;r5=r2>>31|((r2|0)<0?-1:0)<<1;r6=((r2|0)<0?-1:0)>>31|((r2|0)<0?-1:0)<<1;r7=r4>>31|((r4|0)<0?-1:0)<<1;r8=((r4|0)<0?-1:0)>>31|((r4|0)<0?-1:0)<<1;r9=_i64Subtract(r5^r1,r6^r2,r5,r6)|0;r10=tempRet0;r11=_i64Subtract(r7^r3,r8^r4,r7,r8)|0;r12=r7^r5;r13=r8^r6;r14=___udivmoddi4(r9,r10,r11,tempRet0,0)|0;r15=_i64Subtract(r14^r12,tempRet0^r13,r12,r13)|0;return(tempRet0=tempRet0,r15)|0}function ___remdi3(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0,r7=0,r8=0,r9=0,r10=0,r11=0,r12=0,r13=0,r14=0,r15=0;r15=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r15|0;r6=r2>>31|((r2|0)<0?-1:0)<<1;r7=((r2|0)<0?-1:0)>>31|((r2|0)<0?-1:0)<<1;r8=r4>>31|((r4|0)<0?-1:0)<<1;r9=((r4|0)<0?-1:0)>>31|((r4|0)<0?-1:0)<<1;r10=_i64Subtract(r6^r1,r7^r2,r6,r7)|0;r11=tempRet0;r12=_i64Subtract(r8^r3,r9^r4,r8,r9)|0;___udivmoddi4(r10,r11,r12,tempRet0,r5);r13=_i64Subtract(HEAP32[r5>>2]^r6,HEAP32[r5+4>>2]^r7,r6,r7)|0;r14=tempRet0;STACKTOP=r15;return(tempRet0=r14,r13)|0}function ___muldi3(r1,r2,r3,r4){var r5,r6,r7,r8,r9;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0,r7=0,r8=0,r9=0;r5=r1;r6=r3;r7=___muldsi3(r5,r6)|0;r8=tempRet0;r9=Math.imul(r2,r6);return(tempRet0=Math.imul(r4,r5)+r9+r8|r8&0,0|r7&-1)|0}function ___udivdi3(r1,r2,r3,r4){var r5;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0;r5=___udivmoddi4(r1,r2,r3,r4,0)|0;return(tempRet0=tempRet0,r5)|0}function ___uremdi3(r1,r2,r3,r4){var r5,r6;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0;r6=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r6|0;___udivmoddi4(r1,r2,r3,r4,r5);STACKTOP=r6;return(tempRet0=HEAP32[r5+4>>2]|0,HEAP32[r5>>2]|0)|0}function ___udivmoddi4(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=r5|0;r6=0,r7=0,r8=0,r9=0,r10=0,r11=0,r12=0,r13=0,r14=0,r15=0,r16=0,r17=0,r18=0,r19=0,r20=0,r21=0,r22=0,r23=0,r24=0,r25=0,r26=0,r27=0,r28=0,r29=0,r30=0,r31=0,r32=0,r33=0,r34=0,r35=0,r36=0,r37=0,r38=0,r39=0,r40=0,r41=0,r42=0,r43=0,r44=0,r45=0,r46=0,r47=0,r48=0,r49=0,r50=0,r51=0,r52=0,r53=0,r54=0,r55=0,r56=0,r57=0,r58=0,r59=0,r60=0,r61=0,r62=0,r63=0,r64=0,r65=0,r66=0,r67=0,r68=0,r69=0;r6=r1;r7=r2;r8=r7;r9=r3;r10=r4;r11=r10;if((r8|0)==0){r12=(r5|0)!=0;if((r11|0)==0){if(r12){HEAP32[r5>>2]=(r6>>>0)%(r9>>>0);HEAP32[r5+4>>2]=0}r69=0;r68=(r6>>>0)/(r9>>>0)>>>0;return(tempRet0=r69,r68)|0}else{if(!r12){r69=0;r68=0;return(tempRet0=r69,r68)|0}HEAP32[r5>>2]=r1&-1;HEAP32[r5+4>>2]=r2&0;r69=0;r68=0;return(tempRet0=r69,r68)|0}}r13=(r11|0)==0;do{if((r9|0)==0){if(r13){if((r5|0)!=0){HEAP32[r5>>2]=(r8>>>0)%(r9>>>0);HEAP32[r5+4>>2]=0}r69=0;r68=(r8>>>0)/(r9>>>0)>>>0;return(tempRet0=r69,r68)|0}if((r6|0)==0){if((r5|0)!=0){HEAP32[r5>>2]=0;HEAP32[r5+4>>2]=(r8>>>0)%(r11>>>0)}r69=0;r68=(r8>>>0)/(r11>>>0)>>>0;return(tempRet0=r69,r68)|0}r14=r11-1|0;if((r14&r11|0)==0){if((r5|0)!=0){HEAP32[r5>>2]=0|r1&-1;HEAP32[r5+4>>2]=r14&r8|r2&0}r69=0;r68=r8>>>((_llvm_cttz_i32(r11|0)|0)>>>0);return(tempRet0=r69,r68)|0}r15=_llvm_ctlz_i32(r11|0)|0;r16=r15-_llvm_ctlz_i32(r8|0)|0;if(r16>>>0<=30){r17=r16+1|0;r18=31-r16|0;r37=r17;r36=r8<<r18|r6>>>(r17>>>0);r35=r8>>>(r17>>>0);r34=0;r33=r6<<r18;break}if((r5|0)==0){r69=0;r68=0;return(tempRet0=r69,r68)|0}HEAP32[r5>>2]=0|r1&-1;HEAP32[r5+4>>2]=r7|r2&0;r69=0;r68=0;return(tempRet0=r69,r68)|0}else{if(!r13){r28=_llvm_ctlz_i32(r11|0)|0;r29=r28-_llvm_ctlz_i32(r8|0)|0;if(r29>>>0<=31){r30=r29+1|0;r31=31-r29|0;r32=r29-31>>31;r37=r30;r36=r6>>>(r30>>>0)&r32|r8<<r31;r35=r8>>>(r30>>>0)&r32;r34=0;r33=r6<<r31;break}if((r5|0)==0){r69=0;r68=0;return(tempRet0=r69,r68)|0}HEAP32[r5>>2]=0|r1&-1;HEAP32[r5+4>>2]=r7|r2&0;r69=0;r68=0;return(tempRet0=r69,r68)|0}r19=r9-1|0;if((r19&r9|0)!=0){r21=_llvm_ctlz_i32(r9|0)+33|0;r22=r21-_llvm_ctlz_i32(r8|0)|0;r23=64-r22|0;r24=32-r22|0;r25=r24>>31;r26=r22-32|0;r27=r26>>31;r37=r22;r36=r24-1>>31&r8>>>(r26>>>0)|(r8<<r24|r6>>>(r22>>>0))&r27;r35=r27&r8>>>(r22>>>0);r34=r6<<r23&r25;r33=(r8<<r23|r6>>>(r26>>>0))&r25|r6<<r24&r22-33>>31;break}if((r5|0)!=0){HEAP32[r5>>2]=r19&r6;HEAP32[r5+4>>2]=0}if((r9|0)==1){r69=r7|r2&0;r68=0|r1&-1;return(tempRet0=r69,r68)|0}else{r20=_llvm_cttz_i32(r9|0)|0;r69=0|r8>>>(r20>>>0);r68=r8<<32-r20|r6>>>(r20>>>0)|0;return(tempRet0=r69,r68)|0}}}while(0);if((r37|0)==0){r64=r33;r63=r34;r62=r35;r61=r36;r60=0;r59=0}else{r38=0|r3&-1;r39=r10|r4&0;r40=_i64Add(r38,r39,-1,-1)|0;r41=tempRet0;r47=r33;r46=r34;r45=r35;r44=r36;r43=r37;r42=0;while(1){r48=r46>>>31|r47<<1;r49=r42|r46<<1;r50=0|(r44<<1|r47>>>31);r51=r44>>>31|r45<<1|0;_i64Subtract(r40,r41,r50,r51);r52=tempRet0;r53=r52>>31|((r52|0)<0?-1:0)<<1;r54=r53&1;r55=_i64Subtract(r50,r51,r53&r38,(((r52|0)<0?-1:0)>>31|((r52|0)<0?-1:0)<<1)&r39)|0;r56=r55;r57=tempRet0;r58=r43-1|0;if((r58|0)==0){break}else{r47=r48;r46=r49;r45=r57;r44=r56;r43=r58;r42=r54}}r64=r48;r63=r49;r62=r57;r61=r56;r60=0;r59=r54}r65=r63;r66=0;r67=r64|r66;if((r5|0)!=0){HEAP32[r5>>2]=0|r61;HEAP32[r5+4>>2]=r62|0}r69=(0|r65)>>>31|r67<<1|(r66<<1|r65>>>31)&0|r60;r68=(r65<<1|0>>>31)&-2|r59;return(tempRet0=r69,r68)|0}
// EMSCRIPTEN_END_FUNCS
Module["_init_sha512"] = _init_sha512;
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
